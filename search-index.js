var searchIndex = JSON.parse('{\
"eventually":{"doc":"A library providing components to build event-sourced …","i":[[8,"Aggregate","eventually","An Aggregate manages a domain entity <code>State</code>, acting as a <em>…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique …",0,null],[16,"State","","State of the Aggregate: this should represent the Domain …",0,null],[16,"Event","","Represents a specific, domain-related change to the …",0,null],[16,"Command","","Commands are all the possible operations available on an …",0,null],[16,"Error","","Possible failures while <code>apply</code>ing <code>Event</code>s or handling …",0,null],[10,"apply","","Applies an <code>Event</code> to the current Aggregate <code>State</code>.",0,[[],["result",4]]],[10,"handle","","Handles the requested <code>Command</code> and returns a list of <code>Event</code>s…",0,[[],[["box",3],["pin",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with …",null,null],[11,"fold","","Applies a list of <code>Event</code>s from an <code>Iterator</code> to the current …",1,[[],["result",4]]],[6,"AggregateId","","A short extractor type for the Aggregate <code>Id</code>.",null,null],[3,"AggregateRoot","","An <code>AggregateRoot</code> represents an handler to the <code>Aggregate</code> …",null,null],[3,"AggregateRootBuilder","","Builder type for new <code>AggregateRoot</code> instances.",null,null],[8,"Projection","","A <code>Projection</code> is an optimized read model (or materialized …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",2,null],[16,"Event","","Event to be stored in the <code>EventStore</code>, typically an …",2,null],[16,"Error","","Type of the possible error that might occur when …",2,null],[10,"project","","Updates the next value of the <code>Projection</code> using the …",2,[[["persisted",3]],[["box",3],["pin",3]]]],[3,"Repository","","Implementation of the Repository pattern for storing, …",null,null],[8,"EventStore","","An Event Store is an append-only, ordered list of <code>Event</code>s …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",3,null],[16,"Event","","Event to be stored in the <code>EventStore</code>, typically an …",3,null],[16,"Error","","Possible errors returned by the <code>EventStore</code> when …",3,null],[10,"append","","Appends a new list of <code>Event</code>s to the Event Store, for the …",3,[[["vec",3],["global",3],["expected",4]],[["pin",3],["box",3]]]],[10,"stream","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the <code>Event</code>s related to one <code>Source</code>, specified by …",3,[[],[["box",3],["pin",3]]]],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",4,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",4,null],[16,"Error","","Possible errors returned when receiving events from the …",4,null],[10,"subscribe_all","","Subscribes to all new events persisted in the <code>EventStore</code>, …",4,[[],[["pin",3],["box",3]]]],[8,"Subscription","","A Subscription to an <code>EventStream</code> which can be …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",5,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",5,null],[16,"Error","","Possible errors returned when receiving events from the …",5,null],[10,"resume","","Resumes the current state of a <code>Subscription</code> by returning …",5,[[],[["box",3],["pin",3]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the …",5,[[],[["pin",3],["box",3]]]],[8,"Versioned","","Data type that carries a version for Optimistic …",null,null],[10,"version","","Current version of the data.",6,[[]]],[3,"Projector","","A <code>Projector</code> manages the state of a single <code>Projection</code> by …",null,null],[5,"spawn","","Spawns a new asynchronous task, returning a <code>JoinHandle</code> …",null,[[],["joinhandle",3]]],[0,"aggregate","","Module containing support for the Aggergate pattern.",null,null],[6,"AggregateId","eventually::aggregate","A short extractor type for the Aggregate <code>Id</code>.",null,null],[8,"Aggregate","","An Aggregate manages a domain entity <code>State</code>, acting as a <em>…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique …",0,null],[16,"State","","State of the Aggregate: this should represent the Domain …",0,null],[16,"Event","","Represents a specific, domain-related change to the …",0,null],[16,"Command","","Commands are all the possible operations available on an …",0,null],[16,"Error","","Possible failures while <code>apply</code>ing <code>Event</code>s or handling …",0,null],[10,"apply","","Applies an <code>Event</code> to the current Aggregate <code>State</code>.",0,[[],["result",4]]],[10,"handle","","Handles the requested <code>Command</code> and returns a list of <code>Event</code>s…",0,[[],[["box",3],["pin",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with …",null,null],[11,"fold","","Applies a list of <code>Event</code>s from an <code>Iterator</code> to the current …",1,[[],["result",4]]],[3,"AggregateRootBuilder","","Builder type for new <code>AggregateRoot</code> instances.",null,null],[3,"AggregateRoot","","An <code>AggregateRoot</code> represents an handler to the <code>Aggregate</code> …",null,null],[3,"Repository","","Implementation of the Repository pattern for storing, …",null,null],[8,"Optional","","An <code>Option</code>-flavoured, <code>Aggregate</code>-compatible trait to model …",null,null],[16,"Id","","Identifier type of the Aggregate.",7,null],[16,"State","","State of the Aggregate.",7,null],[16,"Event","","Events produced and supported by the Aggregate.",7,null],[16,"Command","","Commands supported by the Aggregate.",7,null],[16,"Error","","Error produced by the the Aggregate while applying <code>Event</code>s …",7,null],[10,"apply_first","","Applies the specified <code>Event</code> when the <code>State</code> is empty.",7,[[],["result",4]]],[10,"apply_next","","Applies the specified <code>Event</code> on a pre-existing <code>State</code> value.",7,[[],["result",4]]],[10,"handle_first","","Handles the specified <code>Command</code> when the <code>State</code> is empty.",7,[[],[["pin",3],["box",3]]]],[10,"handle_next","","Handles the specified <code>Command</code> on a pre-existing <code>State</code> …",7,[[],[["box",3],["pin",3]]]],[11,"as_aggregate","","Translates the current <code>optional::Aggregate</code> instance into …",7,[[],["asaggregate",3]]],[0,"versioning","eventually","Module containing support for Optimistic Concurrency using…",null,null],[8,"Versioned","eventually::versioning","Data type that carries a version for Optimistic …",null,null],[10,"version","","Current version of the data.",6,[[]]],[0,"repository","eventually","Module containing Repository implementation to retrieve, …",null,null],[4,"Error","eventually::repository","Error type returned by the <code>Repository</code>.",null,null],[13,"Aggregate","","Error returned by the <code>Aggregate</code>, usually when recreating …",8,null],[13,"Store","","Error returned by the underlying <code>EventStore</code>.",8,null],[6,"Result","","Result type returned by the <code>Repository</code>.",null,null],[3,"Repository","","Implementation of the Repository pattern for storing, …",null,null],[0,"store","eventually","Module containing support for the Event Store.",null,null],[4,"Select","eventually::store","Selection operation for the events to capture in an …",null,null],[13,"All","","To return all the <code>Event</code>s in the <code>EventStream</code>.",9,null],[13,"From","","To return a slice of the <code>EventStream</code>, starting from those …",9,null],[4,"Expected","","Specifies the optimistic locking level when performing …",null,null],[13,"Any","","Append events disregarding the current <code>Aggregate</code> version.",10,null],[13,"Exact","","Append events only if the current version of the <code>Aggregate</code>…",10,null],[6,"EventStream","","Stream type returned by the <code>EventStore::stream</code> method.",null,null],[8,"AppendError","","Error type returned by <code>append</code> in <code>EventStore</code> …",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict …",11,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of <code>Event</code>s …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",3,null],[16,"Event","","Event to be stored in the <code>EventStore</code>, typically an …",3,null],[16,"Error","","Possible errors returned by the <code>EventStore</code> when …",3,null],[10,"append","","Appends a new list of <code>Event</code>s to the Event Store, for the …",3,[[["vec",3],["global",3],["expected",4]],[["pin",3],["box",3]]]],[10,"stream","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the <code>Event</code>s related to one <code>Source</code>, specified by …",3,[[],[["box",3],["pin",3]]]],[3,"Persisted","","An <code>Event</code> wrapper for events that have been successfully …",null,null],[0,"persistent","","Contains a type-state builder for <code>PersistentEvent</code> type.",null,null],[3,"EventBuilder","eventually::store::persistent","Creates a new [<code>Persisted</code>] by wrapping an Event value.",null,null],[3,"EventBuilderWithVersion","","Next step in creating a new [<code>Persisted</code>] carrying an Event …",null,null],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [<code>Persisted</code>] carrying an Event …",null,null],[0,"subscription","eventually","Module containing support for Subscriptions to Events …",null,null],[6,"EventStream","eventually::subscription","Stream of events returned by the …",null,null],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",4,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",4,null],[16,"Error","","Possible errors returned when receiving events from the …",4,null],[10,"subscribe_all","","Subscribes to all new events persisted in the <code>EventStore</code>, …",4,[[],[["pin",3],["box",3]]]],[6,"SubscriptionStream","","Stream of events returned by the <code>Subscription::resume</code> …",null,null],[8,"Subscription","","A Subscription to an <code>EventStream</code> which can be …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",5,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",5,null],[16,"Error","","Possible errors returned when receiving events from the …",5,null],[10,"resume","","Resumes the current state of a <code>Subscription</code> by returning …",5,[[],[["box",3],["pin",3]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the …",5,[[],[["pin",3],["box",3]]]],[4,"Error","","Error type returned by a <code>Transient</code> Subscription.",null,null],[13,"Store","","Error caused by the Subscription\'s <code>EventStore</code>.",12,null],[13,"Subscription","","Error caused by the Subscription\'s <code>EventSubscriber</code>.",12,null],[3,"Transient","","<code>Subscription</code> type which gets deleted once the process …",null,null],[0,"optional","eventually","Module for the Aggregate extension trait using an <code>Option</code> …",null,null],[8,"Aggregate","eventually::optional","An <code>Option</code>-flavoured, <code>Aggregate</code>-compatible trait to model …",null,null],[16,"Id","","Identifier type of the Aggregate.",7,null],[16,"State","","State of the Aggregate.",7,null],[16,"Event","","Events produced and supported by the Aggregate.",7,null],[16,"Command","","Commands supported by the Aggregate.",7,null],[16,"Error","","Error produced by the the Aggregate while applying <code>Event</code>s …",7,null],[10,"apply_first","","Applies the specified <code>Event</code> when the <code>State</code> is empty.",7,[[],["result",4]]],[10,"apply_next","","Applies the specified <code>Event</code> on a pre-existing <code>State</code> value.",7,[[],["result",4]]],[10,"handle_first","","Handles the specified <code>Command</code> when the <code>State</code> is empty.",7,[[],[["pin",3],["box",3]]]],[10,"handle_next","","Handles the specified <code>Command</code> on a pre-existing <code>State</code> …",7,[[],[["box",3],["pin",3]]]],[11,"as_aggregate","","Translates the current <code>optional::Aggregate</code> instance into …",7,[[],["asaggregate",3]]],[3,"AsAggregate","","<em>Newtype pattern</em> to ensure compatibility between …",null,null],[0,"inmemory","eventually","Module containing utilities using in-memory backend …",null,null],[3,"Projector","eventually::inmemory","A <code>Projector</code> manages the state of a single <code>Projection</code> by …",null,null],[3,"EventStoreBuilder","","Builder for <code>EventStore</code> instances.",null,null],[3,"ConflictError","","Error returned by the <code>EventStore::append</code> when a conflict …",null,null],[12,"expected","","The last version value found the Store.",13,null],[12,"actual","","The actual version passed by the caller to the Store.",13,null],[3,"LaggedError","","Error returned by the <code>EventSubscriber</code> when reading …",null,null],[3,"EventStore","","An in-memory <code>EventStore</code> implementation, backed by an …",null,null],[0,"sync","eventually","Module containing the synchronization primitives used by …",null,null],[3,"RwLock","eventually::sync","An asynchronous reader-writer lock.",null,null],[11,"from","eventually::aggregate","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","eventually::repository","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","eventually::inmemory","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","eventually::repository","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","eventually::store","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","eventually::store::persistent","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","eventually::subscription","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","eventually::optional","",23,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","eventually::inmemory","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","eventually::sync","",27,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"fmt","eventually::repository","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::subscription","",12,[[["formatter",3]],[["result",4],["error",3]]]],[11,"serialize","eventually::aggregate","",14,[[],["result",4]]],[11,"serialize","eventually::store","",18,[[],["result",4]]],[11,"from","eventually::aggregate","",15,[[],["aggregaterootbuilder",3]]],[11,"from","eventually::store::persistent","",19,[[],["eventbuilder",3]]],[11,"deref","eventually::store","",18,[[]]],[11,"deref","eventually::aggregate","",14,[[]]],[11,"source","eventually::subscription","",12,[[],[["error",8],["option",4]]]],[11,"source","eventually::repository","",8,[[],[["error",8],["option",4]]]],[11,"clone","","",16,[[],["repository",3]]],[11,"clone","eventually::store","",18,[[],["persisted",3]]],[11,"clone","eventually::aggregate","",15,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually::store","",9,[[],["select",4]]],[11,"clone","","",10,[[],["expected",4]]],[11,"eq","","",10,[[["expected",4]]]],[11,"ne","","",10,[[["expected",4]]]],[11,"eq","","",9,[[["select",4]]]],[11,"ne","","",9,[[["select",4]]]],[11,"eq","","",18,[[["persisted",3]]]],[11,"ne","","",18,[[["persisted",3]]]],[11,"eq","eventually::aggregate","",14,[[["aggregateroot",3]]]],[11,"fmt","eventually::store","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::repository","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::aggregate","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::subscription","",12,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::store","",10,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deserialize","","",18,[[],[["result",4],["persisted",3]]]],[11,"resume","eventually::subscription","",22,[[],[["pin",3],["box",3]]]],[11,"checkpoint","","",22,[[],[["box",3],["pin",3]]]],[11,"version","eventually::aggregate","",14,[[]]],[11,"version","eventually::store","",18,[[]]],[11,"subscribe_all","eventually::inmemory","",26,[[],[["box",3],["pin",3]]]],[11,"fmt","","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",13,[[["conflicterror",3]]]],[11,"ne","","",13,[[["conflicterror",3]]]],[11,"is_conflict_error","","",13,[[]]],[11,"from","eventually::optional","",23,[[],["asaggregate",3]]],[11,"fmt","eventually::inmemory","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",26,[[],["eventstore",3]]],[11,"clone","eventually::optional","",23,[[],["asaggregate",3]]],[11,"default","eventually::inmemory","",26,[[],["eventstore",3]]],[11,"apply","eventually::optional","",23,[[],["result",4]]],[11,"handle","","",23,[[],[["box",3],["pin",3]]]],[11,"append","eventually::inmemory","",26,[[["global",3],["vec",3],["expected",4]],[["box",3],["pin",3]]]],[11,"stream","","",26,[[["select",4]],[["box",3],["pin",3]]]],[11,"stream_all","","",26,[[["select",4]],[["box",3],["pin",3]]]],[11,"remove","","",26,[[],[["box",3],["pin",3]]]],[11,"fmt","eventually::sync","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","","",27,[[],["rwlock",3]]],[11,"from","","",27,[[],["rwlock",3]]],[11,"id","eventually::aggregate","Returns a reference to the Aggregate <code>Id</code> that represents …",14,[[]]],[11,"state","","Returns a reference to the current Aggregate <code>State</code>.",14,[[]]],[11,"handle","","Handles the submitted <code>Command</code> using the <code>Aggregate::handle</code> …",14,[[]]],[11,"build","","Builds a new <code>AggregateRoot</code> instance for the specified …",15,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new <code>AggregateRoot</code> instance for the specified …",15,[[],["aggregateroot",3]]],[11,"new","eventually::repository","Creates a new <code>Repository</code> instance, using the <code>Aggregate</code> …",16,[[["aggregaterootbuilder",3]],["repository",3]]],[11,"get","","Returns the <code>Aggregate</code> from the <code>Repository</code> with the …",16,[[]]],[11,"add","","Adds a new <code>State</code> of the <code>Aggregate</code> into the <code>Repository</code>, …",16,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified <code>Aggregate</code> from the <code>Repository</code>, …",16,[[]]],[11,"new","eventually::inmemory","Create a new Projector from the provided <code>Projection</code> and …",17,[[["arc",3],["rwlock",3]],["projector",3]]],[11,"run","","Starts the update of the <code>Projection</code> by processing all the …",17,[[]]],[11,"from","eventually::store","Creates a new <code>EventBuilder</code> from the provided Event value.",18,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",18,[[]]],[11,"source_id","","Returns the <code>SourceId</code> of the persisted event.",18,[[]]],[11,"take","","Unwraps the inner <code>Event</code> from the <code>Persisted</code> wrapper.",18,[[]]],[11,"version","eventually::store::persistent","Specifies the <code>PersistentEvent</code> version and moves to the …",19,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the <code>PersistentEvent</code> sequence number and moves …",19,[[],["eventbuilderwithsequencenumber",3]]],[11,"sequence_number","","Specifies the <code>PersistentEvent</code> sequence number and moves …",20,[[],["persisted",3]]],[11,"version","","Specifies the <code>PersistentEvent</code> version and moves to the …",21,[[],["persisted",3]]],[11,"new","eventually::subscription","Creates a new <code>Subscription</code> using the specified <code>EventStore</code> …",22,[[],["transient",3]]],[11,"from","","Specifies the sequence number of the <code>Event</code> the …",22,[[],["transient",3]]],[11,"for_aggregate","eventually::inmemory","Builds a new [<code>EventStore</code>] instance compatible with the …",24,[[],["eventstore",3]]],[11,"new","","Creates a new EventStore with a specified in-memory …",26,[[],["eventstore",3]]],[11,"new","eventually::sync","Creates a new instance of an <code>RwLock<T></code> which is unlocked.",27,[[],["rwlock",3]]],[11,"const_new","","Creates a new instance of an <code>RwLock<T></code> which is unlocked.",27,[[],["rwlock",3]]],[11,"read","","Locks this <code>RwLock</code> with shared read access, causing the …",27,[[]]],[11,"try_read","","Attempts to acquire this <code>RwLock</code> with shared read access.",27,[[],[["result",4],["rwlockreadguard",3],["trylockerror",3]]]],[11,"write","","Locks this <code>RwLock</code> with exclusive write access, causing …",27,[[]]],[11,"try_write","","Attempts to acquire this <code>RwLock</code> with exclusive write …",27,[[],[["rwlockwriteguard",3],["result",4],["trylockerror",3]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",27,[[]]],[11,"into_inner","","Consumes the lock, returning the underlying data.",27,[[]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[8,"Projection"],[8,"EventStore"],[8,"EventSubscriber"],[8,"Subscription"],[8,"Versioned"],[8,"Aggregate"],[4,"Error"],[4,"Select"],[4,"Expected"],[8,"AppendError"],[4,"Error"],[3,"ConflictError"],[3,"AggregateRoot"],[3,"AggregateRootBuilder"],[3,"Repository"],[3,"Projector"],[3,"Persisted"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[3,"Transient"],[3,"AsAggregate"],[3,"EventStoreBuilder"],[3,"LaggedError"],[3,"EventStore"],[3,"RwLock"]]},\
"eventually_core":{"doc":"Container for the fundamental types and abstraction to …","i":[[0,"aggregate","eventually_core","Foundation traits for creating Domain abstractions using …",null,null],[6,"AggregateId","eventually_core::aggregate","A short extractor type for the Aggregate <code>Id</code>.",null,null],[8,"Aggregate","","An Aggregate manages a domain entity <code>State</code>, acting as a <em>…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique …",0,null],[16,"State","","State of the Aggregate: this should represent the Domain …",0,null],[16,"Event","","Represents a specific, domain-related change to the …",0,null],[16,"Command","","Commands are all the possible operations available on an …",0,null],[16,"Error","","Possible failures while <code>apply</code>ing <code>Event</code>s or handling …",0,null],[10,"apply","","Applies an <code>Event</code> to the current Aggregate <code>State</code>.",0,[[],["result",4]]],[10,"handle","","Handles the requested <code>Command</code> and returns a list of <code>Event</code>s…",0,[[],[["result",4],["boxfuture",6]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with …",null,null],[11,"fold","","Applies a list of <code>Event</code>s from an <code>Iterator</code> to the current …",1,[[],["result",4]]],[3,"AggregateRootBuilder","","Builder type for new <code>AggregateRoot</code> instances.",null,null],[11,"build","","Builds a new <code>AggregateRoot</code> instance for the specified …",2,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new <code>AggregateRoot</code> instance for the specified …",2,[[],["aggregateroot",3]]],[3,"AggregateRoot","","An <code>AggregateRoot</code> represents an handler to the <code>Aggregate</code> …",null,null],[11,"id","","Returns a reference to the Aggregate <code>Id</code> that represents …",3,[[]]],[11,"state","","Returns a reference to the current Aggregate <code>State</code>.",3,[[]]],[11,"handle","","Handles the submitted <code>Command</code> using the <code>Aggregate::handle</code> …",3,[[]]],[0,"projection","eventually_core","Contain support for <code>Projection</code>, an optimized read model …",null,null],[8,"Projection","eventually_core::projection","A <code>Projection</code> is an optimized read model (or materialized …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",4,null],[16,"Event","","Event to be stored in the <code>EventStore</code>, typically an …",4,null],[16,"Error","","Type of the possible error that might occur when …",4,null],[10,"project","","Updates the next value of the <code>Projection</code> using the …",4,[[["persisted",3]],[["boxfuture",6],["result",4]]]],[0,"repository","eventually_core","Contains the Repository pattern implementation for …",null,null],[4,"Error","eventually_core::repository","Error type returned by the <code>Repository</code>.",null,null],[13,"Aggregate","","Error returned by the <code>Aggregate</code>, usually when recreating …",5,null],[13,"Store","","Error returned by the underlying <code>EventStore</code>.",5,null],[6,"Result","","Result type returned by the <code>Repository</code>.",null,null],[3,"Repository","","Implementation of the Repository pattern for storing, …",null,null],[11,"new","","Creates a new <code>Repository</code> instance, using the <code>Aggregate</code> …",6,[[["aggregaterootbuilder",3]]]],[11,"get","","Returns the <code>Aggregate</code> from the <code>Repository</code> with the …",6,[[]]],[11,"add","","Adds a new <code>State</code> of the <code>Aggregate</code> into the <code>Repository</code>, …",6,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified <code>Aggregate</code> from the <code>Repository</code>, …",6,[[]]],[0,"store","eventually_core","Contains the Event Store trait for storing and streaming …",null,null],[0,"persistent","eventually_core::store","Contains a type-state builder for <code>PersistentEvent</code> type.",null,null],[3,"EventBuilder","eventually_core::store::persistent","Creates a new [<code>Persisted</code>] by wrapping an Event value.",null,null],[11,"version","","Specifies the <code>PersistentEvent</code> version and moves to the …",7,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the <code>PersistentEvent</code> sequence number and moves …",7,[[],["eventbuilderwithsequencenumber",3]]],[3,"EventBuilderWithVersion","","Next step in creating a new [<code>Persisted</code>] carrying an Event …",null,null],[11,"sequence_number","","Specifies the <code>PersistentEvent</code> sequence number and moves …",8,[[],["persisted",3]]],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [<code>Persisted</code>] carrying an Event …",null,null],[11,"version","","Specifies the <code>PersistentEvent</code> version and moves to the …",9,[[],["persisted",3]]],[4,"Select","eventually_core::store","Selection operation for the events to capture in an …",null,null],[13,"All","","To return all the <code>Event</code>s in the <code>EventStream</code>.",10,null],[13,"From","","To return a slice of the <code>EventStream</code>, starting from those …",10,null],[4,"Expected","","Specifies the optimistic locking level when performing …",null,null],[13,"Any","","Append events disregarding the current <code>Aggregate</code> version.",11,null],[13,"Exact","","Append events only if the current version of the <code>Aggregate</code>…",11,null],[6,"EventStream","","Stream type returned by the <code>EventStore::stream</code> method.",null,null],[8,"AppendError","","Error type returned by <code>append</code> in <code>EventStore</code> …",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict …",12,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of <code>Event</code>s …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",13,null],[16,"Event","","Event to be stored in the <code>EventStore</code>, typically an …",13,null],[16,"Error","","Possible errors returned by the <code>EventStore</code> when …",13,null],[10,"append","","Appends a new list of <code>Event</code>s to the Event Store, for the …",13,[[["expected",4],["vec",3]],[["boxfuture",6],["result",4]]]],[10,"stream","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",13,[[["select",4]],[["result",4],["boxfuture",6]]]],[10,"stream_all","","Streams a list of <code>Event</code>s from the <code>EventStore</code> back to the …",13,[[["select",4]],[["result",4],["boxfuture",6]]]],[10,"remove","","Drops all the <code>Event</code>s related to one <code>Source</code>, specified by …",13,[[],[["result",4],["boxfuture",6]]]],[3,"Persisted","","An <code>Event</code> wrapper for events that have been successfully …",null,null],[11,"from","","Creates a new <code>EventBuilder</code> from the provided Event value.",14,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",14,[[]]],[11,"source_id","","Returns the <code>SourceId</code> of the persisted event.",14,[[]]],[11,"take","","Unwraps the inner <code>Event</code> from the <code>Persisted</code> wrapper.",14,[[]]],[0,"subscription","eventually_core","Module for creating and managing long-running …",null,null],[6,"EventStream","eventually_core::subscription","Stream of events returned by the …",null,null],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",15,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",15,null],[16,"Error","","Possible errors returned when receiving events from the …",15,null],[10,"subscribe_all","","Subscribes to all new events persisted in the <code>EventStore</code>, …",15,[[],[["boxfuture",6],["result",4]]]],[6,"SubscriptionStream","","Stream of events returned by the <code>Subscription::resume</code> …",null,null],[8,"Subscription","","A Subscription to an <code>EventStream</code> which can be …",null,null],[16,"SourceId","","Type of the Source id, typically an <code>AggregateId</code>.",16,null],[16,"Event","","Event type stored in the <code>EventStore</code>, typically an …",16,null],[16,"Error","","Possible errors returned when receiving events from the …",16,null],[10,"resume","","Resumes the current state of a <code>Subscription</code> by returning …",16,[[],[["boxfuture",6],["result",4]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the …",16,[[],[["result",4],["boxfuture",6]]]],[4,"Error","","Error type returned by a <code>Transient</code> Subscription.",null,null],[13,"Store","","Error caused by the Subscription\'s <code>EventStore</code>.",17,null],[13,"Subscription","","Error caused by the Subscription\'s <code>EventSubscriber</code>.",17,null],[3,"Transient","","<code>Subscription</code> type which gets deleted once the process …",null,null],[11,"new","","Creates a new <code>Subscription</code> using the specified <code>EventStore</code> …",18,[[]]],[11,"from","","Specifies the sequence number of the <code>Event</code> the …",18,[[]]],[0,"versioning","eventually_core","Contains support for Optimistic Concurrency Control …",null,null],[8,"Versioned","eventually_core::versioning","Data type that carries a version for Optimistic …",null,null],[10,"version","","Current version of the data.",19,[[]]],[11,"from","eventually_core::aggregate","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","eventually_core::repository","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","eventually_core::store::persistent","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","eventually_core::store","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","eventually_core::subscription","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"resume","","",18,[[],[["boxfuture",6],["result",4]]]],[11,"checkpoint","","",18,[[],[["result",4],["boxfuture",6]]]],[11,"version","eventually_core::aggregate","",3,[[]]],[11,"version","eventually_core::store","",14,[[]]],[11,"from","eventually_core::aggregate","",2,[[]]],[11,"from","eventually_core::store::persistent","",7,[[]]],[11,"clone","eventually_core::aggregate","",2,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually_core::repository","",6,[[],["repository",3]]],[11,"clone","eventually_core::store","",10,[[],["select",4]]],[11,"clone","","",11,[[],["expected",4]]],[11,"clone","","",14,[[],["persisted",3]]],[11,"eq","eventually_core::aggregate","",3,[[]]],[11,"eq","eventually_core::store","",10,[[["select",4]]]],[11,"ne","","",10,[[["select",4]]]],[11,"eq","","",11,[[["expected",4]]]],[11,"ne","","",11,[[["expected",4]]]],[11,"eq","","",14,[[["persisted",3]]]],[11,"ne","","",14,[[["persisted",3]]]],[11,"deref","eventually_core::aggregate","",3,[[]]],[11,"deref","eventually_core::store","",14,[[]]],[11,"fmt","eventually_core::aggregate","",3,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",5,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::store","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::subscription","",17,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",5,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::subscription","",17,[[["formatter",3]],["result",6]]],[11,"source","eventually_core::repository","",5,[[],[["error",8],["option",4]]]],[11,"source","eventually_core::subscription","",17,[[],[["error",8],["option",4]]]],[11,"serialize","eventually_core::aggregate","",3,[[],["result",4]]],[11,"serialize","eventually_core::store","",14,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[3,"AggregateRootBuilder"],[3,"AggregateRoot"],[8,"Projection"],[4,"Error"],[3,"Repository"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[4,"Select"],[4,"Expected"],[8,"AppendError"],[8,"EventStore"],[3,"Persisted"],[8,"EventSubscriber"],[8,"Subscription"],[4,"Error"],[3,"Transient"],[8,"Versioned"]]},\
"eventually_postgres":{"doc":"<code>eventually</code> type implementations for PostgreSQL.","i":[[0,"store","eventually_postgres","Contains an <code>EventStore</code> implementation using PostgreSQL as …",null,null],[6,"Result","eventually_postgres::store","Result returning the crate <code>Error</code> type.",null,null],[6,"PoolResult","","Result returning the connection pool <code>Error</code> type.",null,null],[4,"Error","","Error type returned by the <code>EventStore</code> implementation, …",null,null],[13,"DecodeEvent","","Error when decoding persistent events from the database …",0,null],[13,"EncodeEvents","","Error when encoding the events in <code>append</code> to JSON prior to …",0,null],[13,"Postgres","","Error returned by Postgres when executing queries.",0,null],[13,"Bb8","","Error returned by bb8 connection pool.",0,null],[3,"EventStoreBuilder","","Builder type for <code>EventStore</code> instances.",null,null],[11,"migrate_database","","Ensure the database is migrated to the latest version.",1,[[["pool",3],["postgresconnectionmanager",3]]]],[11,"builder","","Returns a new builder instance after migrations have been …",1,[[["pool",3],["postgresconnectionmanager",3]],["eventstorebuildermigrated",3]]],[3,"EventStoreBuilderMigrated","","Builder step for <code>EventStore</code> instances, after the database …",null,null],[11,"build","","Creates a new <code>EventStore</code> instance using the specified name…",2,[[]]],[11,"for_aggregate","","Creates a new <code>EventStore</code> for an <code>Aggregate</code> type.",2,[[]]],[3,"EventStore","","<code>EventStore</code> implementation using a PostgreSQL backend.",null,null],[0,"subscriber","eventually_postgres","Contains an <code>EventSubscriber</code> implementation using …",null,null],[6,"Result","eventually_postgres::subscriber","Alias type for a <code>Result</code> having <code>SubscriberError</code> as error …",null,null],[4,"SubscriberError","","Error returned by the <code>TryStream</code> on <code>subscribe_all</code>",null,null],[13,"Deserialize","","Error variant returned when deserializing payloads coming …",3,null],[13,"Connection","","Error variant returned when the connection, used for …",3,null],[3,"EventSubscriber","","Subscriber for listening to new events committed to an …",null,null],[11,"new","","Opens a new <code>LISTEN</code> stream on the database pointed by the …",4,[[]]],[0,"subscription","eventually_postgres","Contains a persisted implementation of the <code>Subscription</code> …",null,null],[4,"Error","eventually_postgres::subscription","Error types returned by a <code>Persistent</code> Subscription.",null,null],[13,"Store","","Error variant returned when the cause of the error is …",5,null],[13,"Subscriber","","Error variant returned when the cause of the error is …",5,null],[13,"Checkpoint","","Error variant returned when an issue has occurred during …",5,null],[3,"PersistentBuilder","","Builder type for multiple <code>Persistent</code> Subscription …",null,null],[11,"new","","Creates a new <code>PersistentBuilder</code> instance.",6,[[["pool",3],["postgresconnectionmanager",3],["eventsubscriber",3],["eventstore",3]]]],[11,"get_or_create","","Creates a new <code>Persisted</code> Subscription with the specified …",6,[[["string",3]]]],[3,"Persistent","","<code>Subscription</code> type with persistent state over a Postgres …",null,null],[11,"from","eventually_postgres::store","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","eventually_postgres::subscriber","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","eventually_postgres::subscription","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","eventually_postgres::store","",0,[[["error",3]]]],[11,"from","","",0,[[["runerror",4],["error",3]]]],[11,"clone","","",7,[[],["eventstore",3]]],[11,"clone","eventually_postgres::subscriber","",3,[[],["subscribererror",4]]],[11,"clone","","",4,[[],["eventsubscriber",3]]],[11,"fmt","eventually_postgres::store","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscriber","",3,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscription","",5,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::store","",0,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscriber","",3,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscription","",5,[[["formatter",3]],["result",6]]],[11,"source","eventually_postgres::store","",0,[[],[["error",8],["option",4]]]],[11,"source","eventually_postgres::subscription","",5,[[],[["error",8],["option",4]]]],[11,"append","eventually_postgres::store","",7,[[["expected",4],["vec",3]],[["result",6],["boxfuture",6]]]],[11,"stream","","",7,[[["select",4]],[["boxfuture",6],["result",6]]]],[11,"stream_all","","",7,[[["select",4]],[["boxfuture",6],["result",6]]]],[11,"remove","","",7,[[],[["boxfuture",6],["result",6]]]],[11,"is_conflict_error","","",0,[[]]],[11,"subscribe_all","eventually_postgres::subscriber","",4,[[],[["boxfuture",6],["result",6]]]],[11,"resume","eventually_postgres::subscription","",8,[[],[["result",4],["boxfuture",6]]]],[11,"checkpoint","","",8,[[],[["result",4],["boxfuture",6]]]]],"p":[[4,"Error"],[3,"EventStoreBuilder"],[3,"EventStoreBuilderMigrated"],[4,"SubscriberError"],[3,"EventSubscriber"],[4,"Error"],[3,"PersistentBuilder"],[3,"EventStore"],[3,"Persistent"]]},\
"eventually_redis":{"doc":"Redis backend implementation for <code>eventually</code> crate.","i":[[6,"StoreResult","eventually_redis","Result returning the crate <code>StoreError</code> type.",null,null],[4,"StoreError","","Error types returned by the <code>eventually::EventStore</code> …",null,null],[13,"EncodeEvents","","Error returned when failed to encode events to JSON …",0,null],[13,"DecodeEvents","","Error returned when failed to decoding events from JSON …",0,null],[13,"DecodeJSON","","Error returned when failed to decoding events from JSON …",0,null],[13,"Stream","","Error returned when reading the stream coming from …",0,null],[13,"NoKey","","Error returned when attempting to read a key from the …",0,null],[3,"EventStore","","Redis backend implementation for <code>eventually::EventStore</code> …",null,null],[6,"SubscriberResult","","Result returning the crate <code>SubscriberError</code> type.",null,null],[4,"SubscriberError","","Error types returned by the <code>eventually::EventSubscriber</code> …",null,null],[13,"Connection","","Error returned when failed to establish a <code>PubSub</code> …",1,null],[13,"Payload","","Error returned when failed to get the payload from a …",1,null],[13,"DecodeMessage","","Error returned when failed to decode the payload received …",1,null],[13,"Subscribe","","Error returned when failed to execute the <code>SUBSCRIBE</code> …",1,null],[13,"DecodeSourceId","","Error returned when attempting to decode the source id …",1,null],[3,"EventSubscriber","","Redis backend implementation for …",null,null],[6,"SubscriptionResult","","Result returning the crate <code>SubscriptionError</code> type.",null,null],[4,"SubscriptionError","","Error types returned by the <code>eventually::Subscription</code> …",null,null],[13,"DecodeEvents","","Error returned when failed to decoding events from JSON …",2,null],[13,"Stream","","Error returned when reading the stream coming from the …",2,null],[13,"CheckpointFromRedis","","Error returned when failed to acknowledge one Redis …",2,null],[13,"Checkpoint","","Error returned when Redis didn\'t acknowledge an <code>XACK</code> …",2,null],[3,"PersistentSubscription","","[<code>Subscription</code>] implementation with persistent state over …",null,null],[17,"STREAM_PAGE_DEFAULT","","Default size of a paginated request to Redis …",null,null],[3,"Builder","","Builder type for <code>EventStore</code> and <code>EventSubscriber</code> types.",null,null],[11,"new","","Creates a new builder instance using the specified Redis …",3,[[["client",3]]]],[11,"stream_page_size","","Changes the page size used by the <code>Stream</code> returned in …",3,[[]]],[11,"source_name","","Assignes the specified source name to a copy of the …",3,[[],["builderwithsourcename",3]]],[3,"BuilderWithSourceName","","Second-step builder type for <code>EventStore</code> and …",null,null],[11,"stream_page_size","","Changes the page size used by the <code>Stream</code> returned in …",4,[[]]],[11,"build_store","","Builds a new <code>EventStore</code> instance.",4,[[]]],[11,"build_subscriber","","Builds a new <code>EventSubscriber</code> instance.",4,[[],["eventsubscriber",3]]],[11,"build_persistent_subscription","","Builds a new named <code>PersistentSubscription</code> instance.",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",5,[[],["eventstore",3]]],[11,"clone","","",6,[[],["eventsubscriber",3]]],[11,"clone","","",7,[[],["persistentsubscription",3]]],[11,"clone","","",3,[[],["builder",3]]],[11,"clone","","",4,[[],["builderwithsourcename",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"source","","",2,[[],[["error",8],["option",4]]]],[11,"is_conflict_error","","",0,[[]]],[11,"append","","",5,[[["expected",4],["vec",3]],[["boxfuture",6],["storeresult",6]]]],[11,"stream","","",5,[[["select",4]],[["boxfuture",6],["storeresult",6]]]],[11,"stream_all","","",5,[[["select",4]],[["boxfuture",6],["storeresult",6]]]],[11,"remove","","",5,[[],[["boxfuture",6],["storeresult",6]]]],[11,"subscribe_all","","",6,[[],[["subscriberresult",6],["boxfuture",6]]]],[11,"resume","","",7,[[],[["boxfuture",6],["subscriptionresult",6]]]],[11,"checkpoint","","",7,[[],[["boxfuture",6],["subscriptionresult",6]]]]],"p":[[4,"StoreError"],[4,"SubscriberError"],[4,"SubscriptionError"],[3,"Builder"],[3,"BuilderWithSourceName"],[3,"EventStore"],[3,"EventSubscriber"],[3,"PersistentSubscription"]]},\
"eventually_util":{"doc":"Collection of utilities that extends or implements some …","i":[[5,"spawn","eventually_util","Spawns a new asynchronous task, returning a <code>JoinHandle</code> …",null,[[],["joinhandle",3]]],[0,"inmemory","","Contains supporting entities using an in-memory backend.",null,null],[3,"Projector","eventually_util::inmemory","A <code>Projector</code> manages the state of a single <code>Projection</code> by …",null,null],[3,"ConflictError","","Error returned by the <code>EventStore::append</code> when a conflict …",null,null],[12,"expected","","The last version value found the Store.",0,null],[12,"actual","","The actual version passed by the caller to the Store.",0,null],[3,"LaggedError","","Error returned by the <code>EventSubscriber</code> when reading …",null,null],[3,"EventStoreBuilder","","Builder for <code>EventStore</code> instances.",null,null],[3,"EventStore","","An in-memory <code>EventStore</code> implementation, backed by an …",null,null],[0,"optional","eventually_util","Contains a different flavour of the <code>Aggregate</code> trait, …",null,null],[8,"Aggregate","eventually_util::optional","An <code>Option</code>-flavoured, <code>Aggregate</code>-compatible trait to model …",null,null],[16,"Id","","Identifier type of the Aggregate.",1,null],[16,"State","","State of the Aggregate.",1,null],[16,"Event","","Events produced and supported by the Aggregate.",1,null],[16,"Command","","Commands supported by the Aggregate.",1,null],[16,"Error","","Error produced by the the Aggregate while applying <code>Event</code>s …",1,null],[10,"apply_first","","Applies the specified <code>Event</code> when the <code>State</code> is empty.",1,[[],["result",4]]],[10,"apply_next","","Applies the specified <code>Event</code> on a pre-existing <code>State</code> value.",1,[[],["result",4]]],[10,"handle_first","","Handles the specified <code>Command</code> when the <code>State</code> is empty.",1,[[],[["boxfuture",6],["result",4]]]],[10,"handle_next","","Handles the specified <code>Command</code> on a pre-existing <code>State</code> …",1,[[],[["boxfuture",6],["result",4]]]],[11,"as_aggregate","","Translates the current <code>optional::Aggregate</code> instance into …",1,[[],["asaggregate",3]]],[3,"AsAggregate","","<em>Newtype pattern</em> to ensure compatibility between …",null,null],[0,"sync","eventually_util","Module containing the asynchronous synchronization …",null,null],[3,"RwLock","eventually_util::sync","An asynchronous reader-writer lock.",null,null],[11,"from","eventually_util::inmemory","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","eventually_util::optional","",6,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","eventually_util::sync","",7,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"fmt","","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","","",7,[[],["rwlock",3]]],[11,"from","","",7,[[],["rwlock",3]]],[11,"from","eventually_util::optional","",6,[[]]],[11,"clone","eventually_util::inmemory","",5,[[],["eventstore",3]]],[11,"clone","eventually_util::optional","",6,[[],["asaggregate",3]]],[11,"default","eventually_util::inmemory","",5,[[]]],[11,"eq","","",0,[[["conflicterror",3]]]],[11,"ne","","",0,[[["conflicterror",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"apply","eventually_util::optional","",6,[[],["result",4]]],[11,"handle","","",6,[[],[["result",4],["boxfuture",6]]]],[11,"append","eventually_util::inmemory","",5,[[["expected",4],["vec",3]],[["boxfuture",6],["result",4]]]],[11,"stream","","",5,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"stream_all","","",5,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"remove","","",5,[[],[["boxfuture",6],["result",4]]]],[11,"is_conflict_error","","",0,[[]]],[11,"subscribe_all","","",5,[[],[["result",4],["boxfuture",6]]]],[11,"new","","Create a new Projector from the provided <code>Projection</code> and …",2,[[["rwlock",3],["arc",3]]]],[11,"run","","Starts the update of the <code>Projection</code> by processing all the …",2,[[]]],[11,"for_aggregate","","Builds a new [<code>EventStore</code>] instance compatible with the …",4,[[],["eventstore",3]]],[11,"new","","Creates a new EventStore with a specified in-memory …",5,[[]]],[11,"new","eventually_util::sync","Creates a new instance of an <code>RwLock<T></code> which is unlocked.",7,[[],["rwlock",3]]],[11,"const_new","","Creates a new instance of an <code>RwLock<T></code> which is unlocked.",7,[[],["rwlock",3]]],[11,"read","","Locks this <code>RwLock</code> with shared read access, causing the …",7,[[]]],[11,"try_read","","Attempts to acquire this <code>RwLock</code> with shared read access.",7,[[],[["trylockerror",3],["rwlockreadguard",3],["result",4]]]],[11,"write","","Locks this <code>RwLock</code> with exclusive write access, causing …",7,[[]]],[11,"try_write","","Attempts to acquire this <code>RwLock</code> with exclusive write …",7,[[],[["trylockerror",3],["rwlockwriteguard",3],["result",4]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,[[]]],[11,"into_inner","","Consumes the lock, returning the underlying data.",7,[[]]]],"p":[[3,"ConflictError"],[8,"Aggregate"],[3,"Projector"],[3,"LaggedError"],[3,"EventStoreBuilder"],[3,"EventStore"],[3,"AsAggregate"],[3,"RwLock"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);