var searchIndex = JSON.parse('{\
"eventually":{"doc":"A library providing components to build event-sourced…","i":[[8,"Aggregate","eventually","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["pin",3],["box",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[6,"AggregateId","","A short extractor type for the Aggregate [`Id`].",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[3,"AggregateRootBuilder","","Builder type for new [`AggregateRoot`] instances.",null,null],[8,"Projection","","A `Projection` is an optimized read model (or materialized…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",2,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",2,null],[16,"Error","","Type of the possible error that might occur when…",2,null],[10,"project","","Updates the next value of the `Projection` using the…",2,[[["persisted",3]],[["pin",3],["box",3]]]],[3,"Repository","","Implementation of the [Repository pattern] for storing,…",null,null],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",3,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",3,null],[16,"Error","","Possible errors returned by the `EventStore` when…",3,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",3,[[["vec",3],["expected",4]],[["box",3],["pin",3]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",3,[[],[["pin",3],["box",3]]]],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",4,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",4,null],[16,"Error","","Possible errors returned when receiving events from the…",4,null],[10,"subscribe_all","","Subscribes to all new events persisted in the…",4,[[],[["box",3],["pin",3]]]],[8,"Subscription","","A Subscription to an [`EventStream`] which can be…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",5,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",5,null],[16,"Error","","Possible errors returned when receiving events from the…",5,null],[10,"resume","","Resumes the current state of a `Subscription` by returning…",5,[[],[["pin",3],["box",3]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the…",5,[[],[["box",3],["pin",3]]]],[8,"Versioned","","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",6,[[]]],[3,"Projector","","A `Projector` manages the state of a single [`Projection`]…",null,null],[5,"spawn","","Spawns a new asynchronous task, returning a `JoinHandle`…",null,[[],["joinhandle",3]]],[0,"aggregate","","Module containing support for the Aggergate pattern.",null,null],[6,"AggregateId","eventually::aggregate","A short extractor type for the Aggregate [`Id`].",null,null],[8,"Aggregate","","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["pin",3],["box",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[3,"AggregateRootBuilder","","Builder type for new [`AggregateRoot`] instances.",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[3,"Repository","","Implementation of the [Repository pattern] for storing,…",null,null],[8,"Optional","","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",7,null],[16,"State","","State of the Aggregate.",7,null],[16,"Event","","Events produced and supported by the Aggregate.",7,null],[16,"Command","","Commands supported by the Aggregate.",7,null],[16,"Error","","Error produced by the the Aggregate while applying…",7,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",7,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",7,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",7,[[],[["box",3],["pin",3]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",7,[[],[["box",3],["pin",3]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",7,[[],["asaggregate",3]]],[0,"versioning","eventually","Module containing support for Optimistic Concurrency using…",null,null],[8,"Versioned","eventually::versioning","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",6,[[]]],[0,"repository","eventually","Module containing Repository implementation to retrieve,…",null,null],[4,"Error","eventually::repository","Error type returned by the [`Repository`].",null,null],[13,"Aggregate","","Error returned by the [`Aggregate`], usually when…",8,null],[13,"Store","","Error returned by the underlying [`EventStore`].",8,null],[6,"Result","","Result type returned by the [`Repository`].",null,null],[3,"Repository","","Implementation of the [Repository pattern] for storing,…",null,null],[0,"store","eventually","Module containing support for the Event Store.",null,null],[4,"Select","eventually::store","Selection operation for the events to capture in an…",null,null],[13,"All","","To return all the [`Event`]s in the [`EventStream`].",9,null],[13,"From","","To return a slice of the [`EventStream`], starting from…",9,null],[4,"Expected","","Specifies the optimistic locking level when performing…",null,null],[13,"Any","","Append events disregarding the current [`Aggregate`]…",10,null],[13,"Exact","","Append events only if the current version of the…",10,null],[6,"EventStream","","Stream type returned by the [`EventStore::stream`] method.",null,null],[8,"AppendError","","Error type returned by [`append`] in [`EventStore`]…",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict…",11,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",3,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",3,null],[16,"Error","","Possible errors returned by the `EventStore` when…",3,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",3,[[["vec",3],["expected",4]],[["box",3],["pin",3]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",3,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",3,[[],[["pin",3],["box",3]]]],[3,"Persisted","","An [`Event`] wrapper for events that have been…",null,null],[0,"persistent","","Contains a type-state builder for [`PersistentEvent`] type.",null,null],[3,"EventBuilder","eventually::store::persistent","Creates a new [`Persisted`] by wrapping an Event value.",null,null],[3,"EventBuilderWithVersion","","Next step in creating a new [`Persisted`] carrying an…",null,null],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [`Persisted`] carrying an…",null,null],[0,"subscription","eventually","Module containing support for Subscriptions to Events…",null,null],[6,"EventStream","eventually::subscription","Stream of events returned by the…",null,null],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",4,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",4,null],[16,"Error","","Possible errors returned when receiving events from the…",4,null],[10,"subscribe_all","","Subscribes to all new events persisted in the…",4,[[],[["box",3],["pin",3]]]],[6,"SubscriptionStream","","Stream of events returned by the [`Subscription::resume`]…",null,null],[8,"Subscription","","A Subscription to an [`EventStream`] which can be…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",5,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",5,null],[16,"Error","","Possible errors returned when receiving events from the…",5,null],[10,"resume","","Resumes the current state of a `Subscription` by returning…",5,[[],[["pin",3],["box",3]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the…",5,[[],[["box",3],["pin",3]]]],[4,"Error","","Error type returned by a [`Transient`] Subscription.",null,null],[13,"Store","","Error caused by the Subscription\'s [`EventStore`].",12,null],[13,"Subscription","","Error caused by the Subscription\'s [`EventSubscriber`].",12,null],[3,"Transient","","[`Subscription`] type which gets deleted once the process…",null,null],[0,"optional","eventually","Module for the Aggregate extension trait using an `Option`…",null,null],[8,"Aggregate","eventually::optional","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",7,null],[16,"State","","State of the Aggregate.",7,null],[16,"Event","","Events produced and supported by the Aggregate.",7,null],[16,"Command","","Commands supported by the Aggregate.",7,null],[16,"Error","","Error produced by the the Aggregate while applying…",7,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",7,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",7,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",7,[[],[["box",3],["pin",3]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",7,[[],[["box",3],["pin",3]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",7,[[],["asaggregate",3]]],[3,"AsAggregate","","Newtype pattern to ensure compatibility between…",null,null],[0,"inmemory","eventually","Module containing utilities using in-memory backend…",null,null],[3,"Projector","eventually::inmemory","A `Projector` manages the state of a single [`Projection`]…",null,null],[3,"EventStoreBuilder","","Builder for [`EventStore`] instances.",null,null],[3,"ConflictError","","Error returned by the [`EventStore::append`] when a…",null,null],[12,"expected","","The last version value found the Store.",13,null],[12,"actual","","The actual version passed by the caller to the Store.",13,null],[3,"SubscriberError","","Error returned by the [`EventSubscriber`] when reading…",null,null],[3,"EventStore","","An in-memory [`EventStore`] implementation, backed by an…",null,null],[0,"sync","eventually","Module containing the synchronization primitives used by…",null,null],[3,"RwLock","eventually::sync","An asynchronous reader-writer lock",null,null],[0,"postgres","eventually","Module containing Event Store support using PostgreSQL…",null,null],[0,"store","eventually::postgres","Contains an [`EventStore`] implementation using PostgreSQL…",null,null],[6,"Result","eventually::postgres::store","Result returning the crate [`Error`] type.",null,null],[6,"PoolResult","","Result returning the connection pool [`Error`] type.",null,null],[4,"Error","","Error type returned by the [`EventStore`] implementation,…",null,null],[13,"DecodeEvent","","Error when decoding persistent events from the database…",14,null],[13,"EncodeEvents","","Error when encoding the events in [`append`] to JSON prior…",14,null],[13,"Postgres","","Error returned by Postgres when executing queries.",14,null],[13,"Bb8","","Error returned by bb8 connection pool.",14,null],[3,"EventStoreBuilder","","Builder type for [`EventStore`] instances.",null,null],[3,"EventStoreBuilderMigrated","","Builder step for [`EventStore`] instances, after the…",null,null],[3,"EventStore","","[`EventStore`] implementation using a PostgreSQL backend.",null,null],[0,"subscriber","eventually::postgres","Contains an [`EventSubscriber`] implementation using…",null,null],[6,"Result","eventually::postgres::subscriber","Alias type for a `Result` having [`DeserializeError`] as…",null,null],[3,"DeserializeError","","Error returned by the `TryStream` on [`subscribe_all`]…",null,null],[3,"EventSubscriber","","Subscriber for listening to new events committed to an…",null,null],[0,"subscription","eventually::postgres","Contains a persisted implementation of the…",null,null],[4,"Error","eventually::postgres::subscription","Error types returned by a [`Persistent`] Subscription.",null,null],[13,"Store","","Error variant returned when the cause of the error is…",15,null],[13,"Subscriber","","Error variant returned when the cause of the error is…",15,null],[13,"Checkpoint","","Error variant returned when an issue has occurred during…",15,null],[3,"PersistentBuilder","","Builder type for multiple [`Persistent`] Subscription…",null,null],[3,"Persistent","","[`Subscription`] type with persistent state over a…",null,null],[6,"PoolResult","eventually::postgres","Result returning the connection pool [`Error`] type.",null,null],[3,"EventStoreBuilder","","Builder type for [`EventStore`] instances.",null,null],[3,"EventStoreBuilderMigrated","","Builder step for [`EventStore`] instances, after the…",null,null],[3,"PersistentBuilder","","Builder type for multiple [`Persistent`] Subscription…",null,null],[3,"Persistent","","[`Subscription`] type with persistent state over a…",null,null],[3,"EventStore","","[`EventStore`] implementation using a PostgreSQL backend.",null,null],[3,"DeserializeError","","Error returned by the `TryStream` on [`subscribe_all`]…",null,null],[3,"EventSubscriber","","Subscriber for listening to new events committed to an…",null,null],[11,"from","eventually::aggregate","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","eventually::repository","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","eventually::inmemory","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","eventually::repository","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","eventually::store","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","eventually::store::persistent","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","eventually::subscription","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","eventually::optional","",25,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","eventually::inmemory","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","eventually::sync","",29,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","eventually::postgres::store","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","eventually::postgres","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","eventually::postgres::subscription","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","eventually::postgres","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"resume","eventually::subscription","",24,[[],[["pin",3],["box",3]]]],[11,"checkpoint","","",24,[[],[["box",3],["pin",3]]]],[11,"version","eventually::aggregate","",16,[[]]],[11,"version","eventually::store","",20,[[]]],[11,"clone","","",20,[[],["persisted",3]]],[11,"clone","","",10,[[],["expected",4]]],[11,"clone","eventually::aggregate","",17,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually::store","",9,[[],["select",4]]],[11,"clone","eventually::repository","",18,[[],["repository",3]]],[11,"deserialize","eventually::store","",20,[[],[["result",4],["persisted",3]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::aggregate","",16,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::repository","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::store","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::subscription","",12,[[["formatter",3]],[["error",3],["result",4]]]],[11,"source","","",12,[[],[["error",8],["option",4]]]],[11,"source","eventually::repository","",8,[[],[["error",8],["option",4]]]],[11,"deref","eventually::aggregate","",16,[[]]],[11,"deref","eventually::store","",20,[[]]],[11,"fmt","eventually::subscription","",12,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::repository","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","eventually::store::persistent","",21,[[],["eventbuilder",3]]],[11,"from","eventually::aggregate","",17,[[],["aggregaterootbuilder",3]]],[11,"serialize","eventually::store","",20,[[],["result",4]]],[11,"serialize","eventually::aggregate","",16,[[],["result",4]]],[11,"eq","","",16,[[["aggregateroot",3]]]],[11,"eq","eventually::store","",9,[[["select",4]]]],[11,"ne","","",9,[[["select",4]]]],[11,"eq","","",10,[[["expected",4]]]],[11,"ne","","",10,[[["expected",4]]]],[11,"eq","","",20,[[["persisted",3]]]],[11,"ne","","",20,[[["persisted",3]]]],[11,"source","eventually::inmemory","",27,[[],[["error",8],["option",4]]]],[11,"subscribe_all","","",28,[[],[["box",3],["pin",3]]]],[11,"eq","","",13,[[["conflicterror",3]]]],[11,"ne","","",13,[[["conflicterror",3]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",13,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",13,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","eventually::optional","",25,[[],["asaggregate",3]]],[11,"clone","eventually::inmemory","",28,[[],["eventstore",3]]],[11,"from","","",27,[[["recverror",4]],["subscribererror",3]]],[11,"from","eventually::optional","",25,[[],["asaggregate",3]]],[11,"append","eventually::inmemory","",28,[[["expected",4],["vec",3]],[["pin",3],["box",3]]]],[11,"stream","","",28,[[["select",4]],[["pin",3],["box",3]]]],[11,"stream_all","","",28,[[["select",4]],[["pin",3],["box",3]]]],[11,"remove","","",28,[[],[["pin",3],["box",3]]]],[11,"apply","eventually::optional","",25,[[],["result",4]]],[11,"handle","","",25,[[],[["box",3],["pin",3]]]],[11,"is_conflict_error","eventually::inmemory","",13,[[]]],[11,"default","","",28,[[],["eventstore",3]]],[11,"fmt","eventually::sync","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",29,[[],["rwlock",3]]],[11,"from","","",29,[[],["rwlock",3]]],[11,"source","eventually::postgres::subscription","",15,[[],[["error",8],["option",4]]]],[11,"source","eventually::postgres::store","",14,[[],[["error",8],["option",4]]]],[11,"resume","eventually::postgres","",36,[[],[["pin",3],["box",3]]]],[11,"checkpoint","","",36,[[],[["pin",3],["box",3]]]],[11,"fmt","eventually::postgres::subscription","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::postgres::store","",14,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::postgres","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",32,[[],["eventstore",3]]],[11,"clone","","",33,[[],["deserializeerror",3]]],[11,"clone","","",34,[[],["eventsubscriber",3]]],[11,"from","eventually::postgres::store","",14,[[["error",3]],["error",4]]],[11,"from","","",14,[[["runerror",4],["error",3]],["error",4]]],[11,"append","eventually::postgres","",32,[[["vec",3],["expected",4]],[["box",3],["pin",3]]]],[11,"stream","","",32,[[["select",4]],[["pin",3],["box",3]]]],[11,"stream_all","","",32,[[["select",4]],[["pin",3],["box",3]]]],[11,"remove","","",32,[[],[["pin",3],["box",3]]]],[11,"subscribe_all","","",34,[[],[["pin",3],["box",3]]]],[11,"is_conflict_error","eventually::postgres::store","",14,[[]]],[11,"try_from","eventually::store","",20,[[["notificationpayload",3]],[["result",4],["persisted",3],["deserializeerror",3]]]],[11,"fmt","eventually::postgres::subscription","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::postgres::store","",14,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","eventually::postgres","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"id","eventually::aggregate","Returns a reference to the Aggregate [`Id`] that…",16,[[]]],[11,"state","","Returns a reference to the current Aggregate [`State`].",16,[[]]],[11,"handle","","Handles the submitted [`Command`] using the…",16,[[]]],[11,"build","","Builds a new [`AggregateRoot`] instance for the specified…",17,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new [`AggregateRoot`] instance for the specified…",17,[[],["aggregateroot",3]]],[11,"new","eventually::repository","Creates a new `Repository` instance, using the…",18,[[["aggregaterootbuilder",3]],["repository",3]]],[11,"get","","Returns the [`Aggregate`] from the `Repository` with the…",18,[[]]],[11,"add","","Adds a new [`State`] of the [`Aggregate`] into the…",18,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified [`Aggregate`] from the `Repository`,…",18,[[]]],[11,"new","eventually::inmemory","Create a new Projector from the provided [`Projection`]…",19,[[["arc",3],["rwlock",3]],["projector",3]]],[11,"run","","Starts the update of the `Projection` by processing all…",19,[[]]],[11,"from","eventually::store","Creates a new [`EventBuilder`] from the provided Event…",20,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",20,[[]]],[11,"source_id","","Returns the [`SourceId`] of the persisted event.",20,[[]]],[11,"take","","Unwraps the inner [`Event`] from the `Persisted` wrapper.",20,[[]]],[11,"version","eventually::store::persistent","Specifies the [`PersistentEvent`] version and moves to the…",21,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",21,[[],["eventbuilderwithsequencenumber",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",22,[[],["persisted",3]]],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",23,[[],["persisted",3]]],[11,"new","eventually::subscription","Creates a new [`Subscription`] using the specified…",24,[[],["transient",3]]],[11,"from","","Specifies the sequence number of the `Event` the…",24,[[],["transient",3]]],[11,"for_aggregate","eventually::inmemory","Builds a new [`EventStore`] instance compatible with the…",26,[[],["eventstore",3]]],[11,"new","","Creates a new EventStore with a specified in-memory…",28,[[],["eventstore",3]]],[11,"new","eventually::sync","Creates a new instance of an `RwLock<T>` which is unlocked.",29,[[],["rwlock",3]]],[11,"read","","Locks this rwlock with shared read access, causing the…",29,[[]]],[11,"write","","Locks this rwlock with exclusive write access, causing the…",29,[[]]],[11,"into_inner","","Consumes the lock, returning the underlying data.",29,[[]]],[11,"migrate_database","eventually::postgres","Ensure the database is migrated to the latest version.",30,[[["postgresconnectionmanager",3],["pool",3]]]],[11,"builder","","Returns a new builder instance after migrations have been…",30,[[["postgresconnectionmanager",3],["pool",3]],["eventstorebuildermigrated",3]]],[11,"build","","Creates a new [`EventStore`] instance using the specified…",31,[[]]],[11,"for_aggregate","","Creates a new [`EventStore`] for an [`Aggregate`] type.",31,[[]]],[11,"new","","Opens a new `LISTEN` stream on the database pointed by the…",34,[[]]],[11,"new","","Creates a new [`PersistentBuilder`] instance.",35,[[["eventstore",3],["postgresconnectionmanager",3],["pool",3],["eventsubscriber",3]],["persistentbuilder",3]]],[11,"get_or_create","","Creates a new [`Persisted`] Subscription with the…",35,[[["string",3]]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[8,"Projection"],[8,"EventStore"],[8,"EventSubscriber"],[8,"Subscription"],[8,"Versioned"],[8,"Aggregate"],[4,"Error"],[4,"Select"],[4,"Expected"],[8,"AppendError"],[4,"Error"],[3,"ConflictError"],[4,"Error"],[4,"Error"],[3,"AggregateRoot"],[3,"AggregateRootBuilder"],[3,"Repository"],[3,"Projector"],[3,"Persisted"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[3,"Transient"],[3,"AsAggregate"],[3,"EventStoreBuilder"],[3,"SubscriberError"],[3,"EventStore"],[3,"RwLock"],[3,"EventStoreBuilder"],[3,"EventStoreBuilderMigrated"],[3,"EventStore"],[3,"DeserializeError"],[3,"EventSubscriber"],[3,"PersistentBuilder"],[3,"Persistent"]]},\
"eventually_app_example":{"doc":"","i":[[5,"run","eventually_app_example","",null,[[["config",3]]]],[0,"config","","",null,null],[3,"Config","eventually_app_example::config","",null,null],[12,"db_host","","",0,null],[12,"db_port","","",0,null],[12,"db_username","","",0,null],[12,"db_password","","",0,null],[12,"db_database","","",0,null],[12,"http_port","","",0,null],[12,"log_level","","",0,null],[11,"postgres_dsn","","",0,[[],["string",3]]],[11,"http_addr","","",0,[[]]],[0,"order","eventually_app_example","",null,null],[3,"TotalOrdersProjection","eventually_app_example::order","",null,null],[3,"OrderItem","","",null,null],[12,"item_sku","","",1,null],[12,"quantity","","",1,null],[12,"price","","",1,null],[3,"OrderItems","","",null,null],[3,"Order","","",null,null],[3,"OrderAggregate","","",null,null],[4,"OrderState","","",null,null],[13,"Editable","","",2,null],[12,"updated_at","eventually_app_example::order::OrderState","",3,null],[13,"Complete","eventually_app_example::order","",2,null],[12,"at","eventually_app_example::order::OrderState","",4,null],[13,"Cancelled","eventually_app_example::order","",2,null],[12,"at","eventually_app_example::order::OrderState","",5,null],[4,"OrderCommand","eventually_app_example::order","",null,null],[13,"Create","","",6,null],[13,"AddItem","","",6,null],[12,"item","eventually_app_example::order::OrderCommand","",7,null],[13,"Complete","eventually_app_example::order","",6,null],[13,"Cancel","","",6,null],[4,"OrderEvent","","",null,null],[13,"Created","","",8,null],[12,"id","eventually_app_example::order::OrderEvent","",9,null],[12,"at","","",9,null],[13,"ItemAdded","eventually_app_example::order","",8,null],[12,"item","eventually_app_example::order::OrderEvent","",10,null],[12,"at","","",10,null],[13,"Completed","eventually_app_example::order","",8,null],[12,"at","eventually_app_example::order::OrderEvent","",11,null],[13,"Cancelled","eventually_app_example::order","",8,null],[12,"at","eventually_app_example::order::OrderEvent","",12,null],[4,"OrderError","eventually_app_example::order","",null,null],[13,"AlreadyCreated","","",13,null],[13,"NotYetCreated","","",13,null],[13,"NotEditable","","",13,null],[13,"AlreadyCompleted","","",13,null],[13,"AlreadyCancelled","","",13,null],[11,"created_at","","",14,[[],[["utc",3],["datetime",3]]]],[11,"items","","",14,[[],["vec",3]]],[11,"state","","",14,[[],["orderstate",4]]],[11,"is_editable","","",14,[[]]],[11,"happened_at","","",8,[[],["datetime",3]]],[11,"from","eventually_app_example::config","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","eventually_app_example::order","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",16,[[["orderitem",3],["vec",3]]]],[11,"clone","","",15,[[],["totalordersprojection",3]]],[11,"clone","","",1,[[],["orderitem",3]]],[11,"clone","","",2,[[],["orderstate",4]]],[11,"clone","","",14,[[],["order",3]]],[11,"clone","","",8,[[],["orderevent",4]]],[11,"clone","","",13,[[],["ordererror",4]]],[11,"clone","","",17,[[],["orderaggregate",3]]],[11,"default","","",15,[[],["totalordersprojection",3]]],[11,"eq","","",13,[[["ordererror",4]]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["fmtresult",6]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"apply_first","","",17,[[],["result",4]]],[11,"apply_next","","",17,[[],["result",4]]],[11,"handle_first","","",17,[[],[["boxfuture",6],["result",4]]]],[11,"handle_next","","",17,[[],[["boxfuture",6],["result",4]]]],[11,"project","","",15,[[["persisted",3]],[["boxfuture",6],["result",4]]]],[11,"init","eventually_app_example::config","",0,[[],[["error",4],["result",4]]]]],"p":[[3,"Config"],[3,"OrderItem"],[4,"OrderState"],[13,"Editable"],[13,"Complete"],[13,"Cancelled"],[4,"OrderCommand"],[13,"AddItem"],[4,"OrderEvent"],[13,"Created"],[13,"ItemAdded"],[13,"Completed"],[13,"Cancelled"],[4,"OrderError"],[3,"Order"],[3,"TotalOrdersProjection"],[3,"OrderItems"],[3,"OrderAggregate"]]},\
"eventually_app_example_api":{"doc":"","i":[[5,"main","eventually_app_example_api","",null,[[],["result",6]]]],"p":[]},\
"eventually_core":{"doc":"Container for the fundamental types and abstraction to…","i":[[0,"aggregate","eventually_core","Foundation traits for creating Domain abstractions using…",null,null],[3,"AggregateRootBuilder","eventually_core::aggregate","Builder type for new [`AggregateRoot`] instances.",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[6,"AggregateId","","A short extractor type for the Aggregate [`Id`].",null,null],[8,"Aggregate","","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["boxfuture",6],["result",4]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[11,"build","","Builds a new [`AggregateRoot`] instance for the specified…",2,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new [`AggregateRoot`] instance for the specified…",2,[[],["aggregateroot",3]]],[11,"id","","Returns a reference to the Aggregate [`Id`] that…",3,[[]]],[11,"state","","Returns a reference to the current Aggregate [`State`].",3,[[]]],[11,"handle","","Handles the submitted [`Command`] using the…",3,[[]]],[0,"projection","eventually_core","Contain support for [`Projection`], an optimized read…",null,null],[8,"Projection","eventually_core::projection","A `Projection` is an optimized read model (or materialized…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",4,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",4,null],[16,"Error","","Type of the possible error that might occur when…",4,null],[10,"project","","Updates the next value of the `Projection` using the…",4,[[["persisted",3]],[["result",4],["boxfuture",6]]]],[0,"repository","eventually_core","Contains the [Repository pattern] implementation for…",null,null],[3,"Repository","eventually_core::repository","Implementation of the [Repository pattern] for storing,…",null,null],[4,"Error","","Error type returned by the [`Repository`].",null,null],[13,"Aggregate","","Error returned by the [`Aggregate`], usually when…",5,null],[13,"Store","","Error returned by the underlying [`EventStore`].",5,null],[6,"Result","","Result type returned by the [`Repository`].",null,null],[11,"new","","Creates a new `Repository` instance, using the…",6,[[["aggregaterootbuilder",3]]]],[11,"get","","Returns the [`Aggregate`] from the `Repository` with the…",6,[[]]],[11,"add","","Adds a new [`State`] of the [`Aggregate`] into the…",6,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified [`Aggregate`] from the `Repository`,…",6,[[]]],[0,"store","eventually_core","Contains the Event Store trait for storing and streaming…",null,null],[3,"Persisted","eventually_core::store","An [`Event`] wrapper for events that have been…",null,null],[4,"Select","","Selection operation for the events to capture in an…",null,null],[13,"All","","To return all the [`Event`]s in the [`EventStream`].",7,null],[13,"From","","To return a slice of the [`EventStream`], starting from…",7,null],[4,"Expected","","Specifies the optimistic locking level when performing…",null,null],[13,"Any","","Append events disregarding the current [`Aggregate`]…",8,null],[13,"Exact","","Append events only if the current version of the…",8,null],[0,"persistent","","Contains a type-state builder for [`PersistentEvent`] type.",null,null],[3,"EventBuilder","eventually_core::store::persistent","Creates a new [`Persisted`] by wrapping an Event value.",null,null],[3,"EventBuilderWithVersion","","Next step in creating a new [`Persisted`] carrying an…",null,null],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [`Persisted`] carrying an…",null,null],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",9,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",9,[[],["eventbuilderwithsequencenumber",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",10,[[],["persisted",3]]],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",11,[[],["persisted",3]]],[6,"EventStream","eventually_core::store","Stream type returned by the [`EventStore::stream`] method.",null,null],[8,"AppendError","","Error type returned by [`append`] in [`EventStore`]…",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict…",12,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",13,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",13,null],[16,"Error","","Possible errors returned by the `EventStore` when…",13,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",13,[[["expected",4],["vec",3]],[["result",4],["boxfuture",6]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",13,[[["select",4]],[["boxfuture",6],["result",4]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",13,[[["select",4]],[["boxfuture",6],["result",4]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",13,[[],[["boxfuture",6],["result",4]]]],[11,"from","","Creates a new [`EventBuilder`] from the provided Event…",14,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",14,[[]]],[11,"source_id","","Returns the [`SourceId`] of the persisted event.",14,[[]]],[11,"take","","Unwraps the inner [`Event`] from the `Persisted` wrapper.",14,[[]]],[0,"subscription","eventually_core","Module for creating and managing long-running…",null,null],[3,"Transient","eventually_core::subscription","[`Subscription`] type which gets deleted once the process…",null,null],[4,"Error","","Error type returned by a [`Transient`] Subscription.",null,null],[13,"Store","","Error caused by the Subscription\'s [`EventStore`].",15,null],[13,"Subscription","","Error caused by the Subscription\'s [`EventSubscriber`].",15,null],[6,"EventStream","","Stream of events returned by the…",null,null],[6,"SubscriptionStream","","Stream of events returned by the [`Subscription::resume`]…",null,null],[8,"EventSubscriber","","Component to let users subscribe to newly-inserted events…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",16,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",16,null],[16,"Error","","Possible errors returned when receiving events from the…",16,null],[10,"subscribe_all","","Subscribes to all new events persisted in the…",16,[[],[["result",4],["boxfuture",6]]]],[8,"Subscription","","A Subscription to an [`EventStream`] which can be…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",17,null],[16,"Event","","Event type stored in the [`EventStore`], typically an…",17,null],[16,"Error","","Possible errors returned when receiving events from the…",17,null],[10,"resume","","Resumes the current state of a `Subscription` by returning…",17,[[],[["boxfuture",6],["result",4]]]],[10,"checkpoint","","Saves the provided version (or sequence number) as the…",17,[[],[["boxfuture",6],["result",4]]]],[11,"new","","Creates a new [`Subscription`] using the specified…",18,[[]]],[11,"from","","Specifies the sequence number of the `Event` the…",18,[[]]],[0,"versioning","eventually_core","Contains support for Optimistic Concurrency Control…",null,null],[8,"Versioned","eventually_core::versioning","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",19,[[]]],[11,"from","eventually_core::aggregate","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","eventually_core::repository","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","eventually_core::store","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","eventually_core::store::persistent","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","eventually_core::subscription","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"resume","","",18,[[],[["boxfuture",6],["result",4]]]],[11,"checkpoint","","",18,[[],[["boxfuture",6],["result",4]]]],[11,"version","eventually_core::aggregate","",3,[[]]],[11,"version","eventually_core::store","",14,[[]]],[11,"from","eventually_core::aggregate","",2,[[]]],[11,"from","eventually_core::store::persistent","",9,[[]]],[11,"clone","eventually_core::aggregate","",2,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually_core::repository","",6,[[],["repository",3]]],[11,"clone","eventually_core::store","",7,[[],["select",4]]],[11,"clone","","",8,[[],["expected",4]]],[11,"clone","","",14,[[],["persisted",3]]],[11,"eq","eventually_core::aggregate","",3,[[]]],[11,"eq","eventually_core::store","",7,[[["select",4]]]],[11,"ne","","",7,[[["select",4]]]],[11,"eq","","",8,[[["expected",4]]]],[11,"ne","","",8,[[["expected",4]]]],[11,"eq","","",14,[[["persisted",3]]]],[11,"ne","","",14,[[["persisted",3]]]],[11,"deref","eventually_core::aggregate","",3,[[]]],[11,"deref","eventually_core::store","",14,[[]]],[11,"fmt","eventually_core::aggregate","",3,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",5,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::store","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::subscription","",15,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",5,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::subscription","",15,[[["formatter",3]],["result",6]]],[11,"source","eventually_core::repository","",5,[[],[["option",4],["error",8]]]],[11,"source","eventually_core::subscription","",15,[[],[["option",4],["error",8]]]],[11,"serialize","eventually_core::aggregate","",3,[[],["result",4]]],[11,"serialize","eventually_core::store","",14,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[3,"AggregateRootBuilder"],[3,"AggregateRoot"],[8,"Projection"],[4,"Error"],[3,"Repository"],[4,"Select"],[4,"Expected"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[8,"AppendError"],[8,"EventStore"],[3,"Persisted"],[4,"Error"],[8,"EventSubscriber"],[8,"Subscription"],[3,"Transient"],[8,"Versioned"]]},\
"eventually_postgres":{"doc":"[`eventually`] type implementations for PostgreSQL.","i":[[0,"store","eventually_postgres","Contains an [`EventStore`] implementation using PostgreSQL…",null,null],[3,"EventStoreBuilder","eventually_postgres::store","Builder type for [`EventStore`] instances.",null,null],[3,"EventStoreBuilderMigrated","","Builder step for [`EventStore`] instances, after the…",null,null],[3,"EventStore","","[`EventStore`] implementation using a PostgreSQL backend.",null,null],[4,"Error","","Error type returned by the [`EventStore`] implementation,…",null,null],[13,"DecodeEvent","","Error when decoding persistent events from the database…",0,null],[13,"EncodeEvents","","Error when encoding the events in [`append`] to JSON prior…",0,null],[13,"Postgres","","Error returned by Postgres when executing queries.",0,null],[13,"Bb8","","Error returned by bb8 connection pool.",0,null],[6,"Result","","Result returning the crate [`Error`] type.",null,null],[6,"PoolResult","","Result returning the connection pool [`Error`] type.",null,null],[11,"migrate_database","","Ensure the database is migrated to the latest version.",1,[[["pool",3],["postgresconnectionmanager",3]]]],[11,"builder","","Returns a new builder instance after migrations have been…",1,[[["pool",3],["postgresconnectionmanager",3]],["eventstorebuildermigrated",3]]],[11,"build","","Creates a new [`EventStore`] instance using the specified…",2,[[]]],[11,"for_aggregate","","Creates a new [`EventStore`] for an [`Aggregate`] type.",2,[[]]],[0,"subscriber","eventually_postgres","Contains an [`EventSubscriber`] implementation using…",null,null],[3,"DeserializeError","eventually_postgres::subscriber","Error returned by the `TryStream` on [`subscribe_all`]…",null,null],[3,"EventSubscriber","","Subscriber for listening to new events committed to an…",null,null],[6,"Result","","Alias type for a `Result` having [`DeserializeError`] as…",null,null],[11,"new","","Opens a new `LISTEN` stream on the database pointed by the…",3,[[]]],[0,"subscription","eventually_postgres","Contains a persisted implementation of the…",null,null],[3,"PersistentBuilder","eventually_postgres::subscription","Builder type for multiple [`Persistent`] Subscription…",null,null],[3,"Persistent","","[`Subscription`] type with persistent state over a…",null,null],[4,"Error","","Error types returned by a [`Persistent`] Subscription.",null,null],[13,"Store","","Error variant returned when the cause of the error is…",4,null],[13,"Subscriber","","Error variant returned when the cause of the error is…",4,null],[13,"Checkpoint","","Error variant returned when an issue has occurred during…",4,null],[11,"new","","Creates a new [`PersistentBuilder`] instance.",5,[[["eventsubscriber",3],["pool",3],["postgresconnectionmanager",3],["eventstore",3]]]],[11,"get_or_create","","Creates a new [`Persisted`] Subscription with the…",5,[[["string",3]]]],[11,"from","eventually_postgres::store","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","eventually_postgres::subscriber","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","eventually_postgres::subscription","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","eventually_postgres::store","",0,[[["error",3]]]],[11,"from","","",0,[[["error",3],["runerror",4]]]],[11,"clone","","",6,[[],["eventstore",3]]],[11,"clone","eventually_postgres::subscriber","",7,[[],["deserializeerror",3]]],[11,"clone","","",3,[[],["eventsubscriber",3]]],[11,"fmt","eventually_postgres::store","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscriber","",7,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscription","",4,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::store","",0,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscriber","",7,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_postgres::subscription","",4,[[["formatter",3]],["result",6]]],[11,"source","eventually_postgres::store","",0,[[],[["option",4],["error",8]]]],[11,"source","eventually_postgres::subscription","",4,[[],[["option",4],["error",8]]]],[11,"append","eventually_postgres::store","",6,[[["vec",3],["expected",4]],[["result",6],["boxfuture",6]]]],[11,"stream","","",6,[[["select",4]],[["result",6],["boxfuture",6]]]],[11,"stream_all","","",6,[[["select",4]],[["result",6],["boxfuture",6]]]],[11,"remove","","",6,[[],[["result",6],["boxfuture",6]]]],[11,"is_conflict_error","","",0,[[]]],[11,"subscribe_all","eventually_postgres::subscriber","",3,[[],[["result",6],["boxfuture",6]]]],[11,"resume","eventually_postgres::subscription","",8,[[],[["boxfuture",6],["result",4]]]],[11,"checkpoint","","",8,[[],[["boxfuture",6],["result",4]]]]],"p":[[4,"Error"],[3,"EventStoreBuilder"],[3,"EventStoreBuilderMigrated"],[3,"EventSubscriber"],[4,"Error"],[3,"PersistentBuilder"],[3,"EventStore"],[3,"DeserializeError"],[3,"Persistent"]]},\
"eventually_redis":{"doc":"Redis backend implementation for `eventually` crate.","i":[[3,"EventStoreBuilder","eventually_redis","Builder type for [`EventStore`] and [`EventSubscriber`]…",null,null],[3,"EventStore","","Redis backend implementation for…",null,null],[3,"EventSubscriber","","Redis backend implementation for…",null,null],[4,"StoreError","","Error types returned by the [`eventually::EventStore`]…",null,null],[13,"EncodeEvents","","Error returned when failed to encode events to JSON during…",0,null],[13,"DecodeEvents","","Error returned when failed to decoding events from JSON…",0,null],[13,"Stream","","Error returned when reading the stream coming from `XRANGE…",0,null],[13,"NoKey","","Error returned when attempting to read a key from the…",0,null],[13,"DecodeSourceId","","Error returned when attempting to decode the source id of…",0,null],[4,"SubscriberError","","Error types returned by the…",null,null],[13,"Connection","","Error returned when failed to establish a [`PubSub`]…",1,null],[13,"Payload","","Error returned when failed to get the payload from a…",1,null],[13,"DecodeMessage","","Error returned when failed to decode the payload received…",1,null],[13,"Subscribe","","Error returned when failed to execute the `SUBSCRIBE`…",1,null],[13,"DecodeSourceId","","Error returned when attempting to decode the source id…",1,null],[6,"StoreResult","","Result returning the crate [`StoreError`] type.",null,null],[6,"SubscriberResult","","Result returning the crate [`SubscriberError`] type.",null,null],[17,"STREAM_PAGE_DEFAULT","","Default size of a paginated request to Redis `XRANGE ..…",null,null],[11,"new","","Creates a new builder instance using the specified Redis…",2,[[["client",3]]]],[11,"stream_page_size","","Changes the page size used by the [`Stream`] returned in…",2,[[]]],[11,"build_store","","Builds a new [`EventStore`] instance.",2,[[]]],[11,"build_subscriber","","Builds a new [`EventSubscriber`] instance.",2,[[],["eventsubscriber",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",2,[[],["eventstorebuilder",3]]],[11,"clone","","",3,[[],["eventstore",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"source","","",1,[[],[["option",4],["error",8]]]],[11,"append","","",3,[[["vec",3],["expected",4]],[["boxfuture",6],["storeresult",6]]]],[11,"stream","","",3,[[["select",4]],[["boxfuture",6],["storeresult",6]]]],[11,"stream_all","","",3,[[["select",4]],[["boxfuture",6],["storeresult",6]]]],[11,"remove","","",3,[[],[["storeresult",6],["boxfuture",6]]]],[11,"is_conflict_error","","",0,[[]]],[11,"subscribe_all","","",4,[[],[["boxfuture",6],["subscriberresult",6]]]]],"p":[[4,"StoreError"],[4,"SubscriberError"],[3,"EventStoreBuilder"],[3,"EventStore"],[3,"EventSubscriber"]]},\
"eventually_util":{"doc":"Collection of utilities that extends or implements some of…","i":[[5,"spawn","eventually_util","Spawns a new asynchronous task, returning a `JoinHandle`…",null,[[],["joinhandle",3]]],[0,"inmemory","","Contains supporting entities using an in-memory backend.",null,null],[3,"Projector","eventually_util::inmemory","A `Projector` manages the state of a single [`Projection`]…",null,null],[3,"ConflictError","","Error returned by the [`EventStore::append`] when a…",null,null],[12,"expected","","The last version value found the Store.",0,null],[12,"actual","","The actual version passed by the caller to the Store.",0,null],[3,"SubscriberError","","Error returned by the [`EventSubscriber`] when reading…",null,null],[3,"EventStoreBuilder","","Builder for [`EventStore`] instances.",null,null],[3,"EventStore","","An in-memory [`EventStore`] implementation, backed by an…",null,null],[11,"new","","Create a new Projector from the provided [`Projection`]…",1,[[["arc",3],["rwlock",3]]]],[11,"run","","Starts the update of the `Projection` by processing all…",1,[[]]],[11,"for_aggregate","","Builds a new [`EventStore`] instance compatible with the…",2,[[],["eventstore",3]]],[11,"new","","Creates a new EventStore with a specified in-memory…",3,[[]]],[0,"optional","eventually_util","Contains a different flavour of the [`Aggregate`] trait,…",null,null],[3,"AsAggregate","eventually_util::optional","Newtype pattern to ensure compatibility between…",null,null],[8,"Aggregate","","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",4,null],[16,"State","","State of the Aggregate.",4,null],[16,"Event","","Events produced and supported by the Aggregate.",4,null],[16,"Command","","Commands supported by the Aggregate.",4,null],[16,"Error","","Error produced by the the Aggregate while applying…",4,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",4,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",4,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",4,[[],[["boxfuture",6],["result",4]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",4,[[],[["boxfuture",6],["result",4]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",4,[[],["asaggregate",3]]],[0,"sync","eventually_util","Module containing the asynchronous synchronization…",null,null],[3,"RwLock","eventually_util::sync","An asynchronous reader-writer lock",null,null],[11,"from","eventually_util::inmemory","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","eventually_util::optional","",6,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","eventually_util::sync","",7,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",7,[[],["rwlock",3]]],[11,"from","","",7,[[],["rwlock",3]]],[11,"from","eventually_util::inmemory","",5,[[["recverror",4]]]],[11,"from","eventually_util::optional","",6,[[]]],[11,"clone","eventually_util::inmemory","",3,[[],["eventstore",3]]],[11,"clone","eventually_util::optional","",6,[[],["asaggregate",3]]],[11,"default","eventually_util::inmemory","",3,[[]]],[11,"eq","","",0,[[["conflicterror",3]]]],[11,"ne","","",0,[[["conflicterror",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"source","","",5,[[],[["option",4],["error",8]]]],[11,"apply","eventually_util::optional","",6,[[],["result",4]]],[11,"handle","","",6,[[],[["boxfuture",6],["result",4]]]],[11,"append","eventually_util::inmemory","",3,[[["vec",3],["expected",4]],[["boxfuture",6],["result",4]]]],[11,"stream","","",3,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"stream_all","","",3,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"remove","","",3,[[],[["boxfuture",6],["result",4]]]],[11,"is_conflict_error","","",0,[[]]],[11,"subscribe_all","","",3,[[],[["boxfuture",6],["result",4]]]],[11,"new","eventually_util::sync","Creates a new instance of an `RwLock<T>` which is unlocked.",7,[[],["rwlock",3]]],[11,"read","","Locks this rwlock with shared read access, causing the…",7,[[]]],[11,"write","","Locks this rwlock with exclusive write access, causing the…",7,[[]]],[11,"into_inner","","Consumes the lock, returning the underlying data.",7,[[]]]],"p":[[3,"ConflictError"],[3,"Projector"],[3,"EventStoreBuilder"],[3,"EventStore"],[8,"Aggregate"],[3,"SubscriberError"],[3,"AsAggregate"],[3,"RwLock"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);