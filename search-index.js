var searchIndex = JSON.parse('{\
"eventually":{"doc":"","i":[[8,"Aggregate","eventually","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["box",3],["pin",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[6,"AggregateId","","A short extractor type for the Aggregate [`Id`].",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[3,"AggregateRootBuilder","","Builder type for new [`AggregateRoot`] instances.",null,null],[3,"Repository","","Implementation of the [Repository pattern] for storing,…",null,null],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",2,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",2,null],[16,"Error","","Possible errors returned by the `EventStore` when…",2,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",2,[[["expected",4],["vec",3]],[["pin",3],["box",3]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",2,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",2,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",2,[[],[["pin",3],["box",3]]]],[8,"Versioned","","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",3,[[]]],[0,"aggregate","","",null,null],[6,"AggregateId","eventually::aggregate","A short extractor type for the Aggregate [`Id`].",null,null],[8,"Aggregate","","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["box",3],["pin",3]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[3,"AggregateRootBuilder","","Builder type for new [`AggregateRoot`] instances.",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[8,"Optional","","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",4,null],[16,"State","","State of the Aggregate.",4,null],[16,"Event","","Events produced and supported by the Aggregate.",4,null],[16,"Command","","Commands supported by the Aggregate.",4,null],[16,"Error","","Error produced by the the Aggregate while applying…",4,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",4,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",4,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",4,[[],[["pin",3],["box",3]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",4,[[],[["pin",3],["box",3]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",4,[[],["asaggregate",3]]],[0,"versioning","eventually","",null,null],[8,"Versioned","eventually::versioning","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",3,[[]]],[0,"repository","eventually","",null,null],[4,"Error","eventually::repository","Error type returned by the [`Repository`].",null,null],[13,"Aggregate","","Error returned by the [`Aggregate`], usually when…",5,null],[13,"Store","","Error returned by the underlying [`EventStore`].",5,null],[6,"Result","","Result type returned by the [`Repository`].",null,null],[3,"Repository","","Implementation of the [Repository pattern] for storing,…",null,null],[0,"store","eventually","",null,null],[0,"persistent","eventually::store","Contains a type-state builder for [`PersistentEvent`] type.",null,null],[3,"EventBuilder","eventually::store::persistent","Creates a new [`PersistedEvent`] by wrapping an Event value.",null,null],[3,"EventBuilderWithVersion","","Next step in creating a new [`PersistedEvent`] carrying an…",null,null],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [`PersistedEvent`] carrying an…",null,null],[3,"PersistedEvent","eventually::store","An [`Event`] wrapper for events that have been…",null,null],[4,"Select","","Selection operation for the events to capture in an…",null,null],[13,"All","","To return all the [`Event`]s in the [`EventStream`].",6,null],[13,"From","","To return a slice of the [`EventStream`], starting from…",6,null],[4,"Expected","","Specifies the optimistic locking level when performing…",null,null],[13,"Any","","Append events disregarding the current [`Aggregate`]…",7,null],[13,"Exact","","Append events only if the current version of the…",7,null],[6,"EventStream","","Stream type returned by the [`EventStore::stream`] method.",null,null],[8,"AppendError","","Error type returned by [`append`] in [`EventStore`]…",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict…",8,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",2,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",2,null],[16,"Error","","Possible errors returned by the `EventStore` when…",2,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",2,[[["expected",4],["vec",3]],[["pin",3],["box",3]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",2,[[["select",4]],[["pin",3],["box",3]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",2,[[["select",4]],[["pin",3],["box",3]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",2,[[],[["pin",3],["box",3]]]],[0,"optional","eventually","",null,null],[8,"Aggregate","eventually::optional","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",4,null],[16,"State","","State of the Aggregate.",4,null],[16,"Event","","Events produced and supported by the Aggregate.",4,null],[16,"Command","","Commands supported by the Aggregate.",4,null],[16,"Error","","Error produced by the the Aggregate while applying…",4,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",4,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",4,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",4,[[],[["pin",3],["box",3]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",4,[[],[["pin",3],["box",3]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",4,[[],["asaggregate",3]]],[3,"AsAggregate","","Newtype pattern to ensure compatibility between…",null,null],[0,"inmemory","eventually","",null,null],[4,"Error","eventually::inmemory","Error returned by the [`EventStore::append`] when a…",null,null],[13,"Conflict","","Version conflict registered.",9,null],[12,"expected","eventually::inmemory::Error","The last version value found the Store.",10,null],[12,"actual","","The actual version passed by the caller to the Store.",10,null],[3,"EventStoreBuilder","eventually::inmemory","Builder for [`EventStore`] instances.",null,null],[3,"EventStore","","An in-memory [`EventStore`] implementation, backed by an…",null,null],[11,"from","eventually::aggregate","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","eventually::repository","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","eventually::store::persistent","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","eventually::store","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","eventually::optional","",18,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","eventually::inmemory","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"source","eventually::repository","",5,[[],[["error",8],["option",4]]]],[11,"deserialize","eventually::store","",17,[[],[["persistedevent",3],["result",4]]]],[11,"eq","","",7,[[["expected",4]]]],[11,"ne","","",7,[[["expected",4]]]],[11,"eq","","",17,[[["persistedevent",3]]]],[11,"ne","","",17,[[["persistedevent",3]]]],[11,"eq","","",6,[[["select",4]]]],[11,"ne","","",6,[[["select",4]]]],[11,"eq","eventually::aggregate","",11,[[["aggregateroot",3]]]],[11,"fmt","eventually::repository","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","eventually::aggregate","",12,[[["arc",3]],["aggregaterootbuilder",3]]],[11,"from","eventually::store::persistent","",14,[[],["eventbuilder",3]]],[11,"fmt","eventually::repository","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::store","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",17,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","eventually::aggregate","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deref","eventually::store","",17,[[]]],[11,"clone","","",7,[[],["expected",4]]],[11,"clone","","",6,[[],["select",4]]],[11,"clone","eventually::aggregate","",12,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually::store","",17,[[],["persistedevent",3]]],[11,"serialize","eventually::aggregate","",11,[[],["result",4]]],[11,"serialize","eventually::store","",17,[[],["result",4]]],[11,"version","eventually::aggregate","",11,[[]]],[11,"version","eventually::store","",17,[[]]],[11,"clone","eventually::inmemory","",20,[[],["eventstore",3]]],[11,"clone","eventually::optional","",18,[[],["asaggregate",3]]],[11,"eq","eventually::inmemory","",9,[[["error",4]]]],[11,"ne","","",9,[[["error",4]]]],[11,"default","","",20,[[],["eventstore",3]]],[11,"from","eventually::optional","",18,[[],["asaggregate",3]]],[11,"fmt","eventually::inmemory","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"apply","eventually::optional","",18,[[],["result",4]]],[11,"handle","","",18,[[],[["pin",3],["box",3]]]],[11,"is_conflict_error","eventually::inmemory","",9,[[]]],[11,"append","","",20,[[["vec",3],["expected",4]],[["pin",3],["box",3]]]],[11,"stream","","",20,[[["select",4]],[["box",3],["pin",3]]]],[11,"stream_all","","",20,[[["select",4]],[["box",3],["pin",3]]]],[11,"remove","","",20,[[],[["pin",3],["box",3]]]],[11,"id","eventually::aggregate","Returns a reference to the Aggregate [`Id`] that…",11,[[]]],[11,"state","","Returns a reference to the current Aggregate [`State`].",11,[[]]],[11,"handle","","Handles the submitted [`Command`] using the…",11,[[]]],[11,"build","","Builds a new [`AggregateRoot`] instance for the specified…",12,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new [`AggregateRoot`] instance for the specified…",12,[[],["aggregateroot",3]]],[11,"new","eventually::repository","Creates a new `Repository` instance, using the…",13,[[["aggregaterootbuilder",3]],["repository",3]]],[11,"get","","Returns the [`Aggregate`] from the `Repository` with the…",13,[[]]],[11,"add","","Adds a new [`State`] of the [`Aggregate`] into the…",13,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified [`Aggregate`] from the `Repository`,…",13,[[]]],[11,"version","eventually::store::persistent","Specifies the [`PersistentEvent`] version and moves to the…",14,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",14,[[],["eventbuilderwithsequencenumber",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",15,[[],["persistedevent",3]]],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",16,[[],["persistedevent",3]]],[11,"from","eventually::store","Creates a new [`EventBuilder`] from the provided Event…",17,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",17,[[]]],[11,"source_id","","Returns the [`SourceId`] of the persisted event.",17,[[]]],[11,"take","","Unwraps the inner [`Event`] from the `PersistedEvent`…",17,[[]]],[11,"for_aggregate","eventually::inmemory","Builds a new [`EventStore`] instance compatible with the…",19,[[],["eventstore",3]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[8,"EventStore"],[8,"Versioned"],[8,"Aggregate"],[4,"Error"],[4,"Select"],[4,"Expected"],[8,"AppendError"],[4,"Error"],[13,"Conflict"],[3,"AggregateRoot"],[3,"AggregateRootBuilder"],[3,"Repository"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[3,"PersistedEvent"],[3,"AsAggregate"],[3,"EventStoreBuilder"],[3,"EventStore"]]},\
"eventually_core":{"doc":"Container for the fundamental types and abstraction to…","i":[[0,"aggregate","eventually_core","Foundation traits for creating Domain abstractions using…",null,null],[3,"AggregateRootBuilder","eventually_core::aggregate","Builder type for new [`AggregateRoot`] instances.",null,null],[3,"AggregateRoot","","An `AggregateRoot` represents an handler to the…",null,null],[6,"AggregateId","","A short extractor type for the Aggregate [`Id`].",null,null],[8,"Aggregate","","An Aggregate manages a domain entity [`State`], acting as…",null,null],[16,"Id","","Aggregate identifier: this should represent an unique…",0,null],[16,"State","","State of the Aggregate: this should represent the Domain…",0,null],[16,"Event","","Represents a specific, domain-related change to the…",0,null],[16,"Command","","Commands are all the possible operations available on an…",0,null],[16,"Error","","Possible failures while [`apply`]ing [`Event`]s or…",0,null],[10,"apply","","Applies an [`Event`] to the current Aggregate [`State`].",0,[[],["result",4]]],[10,"handle","","Handles the requested [`Command`] and returns a list of…",0,[[],[["boxfuture",6],["result",4]]]],[8,"AggregateExt","","Extension trait with some handy methods to use with…",null,null],[11,"fold","","Applies a list of [`Event`]s from an `Iterator` to the…",1,[[],["result",4]]],[11,"build","","Builds a new [`AggregateRoot`] instance for the specified…",2,[[],["aggregateroot",3]]],[11,"build_with_state","","Builds a new [`AggregateRoot`] instance for the specified…",2,[[],["aggregateroot",3]]],[11,"id","","Returns a reference to the Aggregate [`Id`] that…",3,[[]]],[11,"state","","Returns a reference to the current Aggregate [`State`].",3,[[]]],[11,"handle","","Handles the submitted [`Command`] using the…",3,[[]]],[0,"repository","eventually_core","Contains the [Repository pattern] implementation for…",null,null],[3,"Repository","eventually_core::repository","Implementation of the [Repository pattern] for storing,…",null,null],[4,"Error","","Error type returned by the [`Repository`].",null,null],[13,"Aggregate","","Error returned by the [`Aggregate`], usually when…",4,null],[13,"Store","","Error returned by the underlying [`EventStore`].",4,null],[6,"Result","","Result type returned by the [`Repository`].",null,null],[11,"new","","Creates a new `Repository` instance, using the…",5,[[["aggregaterootbuilder",3]]]],[11,"get","","Returns the [`Aggregate`] from the `Repository` with the…",5,[[]]],[11,"add","","Adds a new [`State`] of the [`Aggregate`] into the…",5,[[["aggregateroot",3]]]],[11,"remove","","Removes the specified [`Aggregate`] from the `Repository`,…",5,[[]]],[0,"store","eventually_core","Contains the Event Store trait for storing and streaming…",null,null],[3,"PersistedEvent","eventually_core::store","An [`Event`] wrapper for events that have been…",null,null],[4,"Select","","Selection operation for the events to capture in an…",null,null],[13,"All","","To return all the [`Event`]s in the [`EventStream`].",6,null],[13,"From","","To return a slice of the [`EventStream`], starting from…",6,null],[4,"Expected","","Specifies the optimistic locking level when performing…",null,null],[13,"Any","","Append events disregarding the current [`Aggregate`]…",7,null],[13,"Exact","","Append events only if the current version of the…",7,null],[0,"persistent","","Contains a type-state builder for [`PersistentEvent`] type.",null,null],[3,"EventBuilder","eventually_core::store::persistent","Creates a new [`PersistedEvent`] by wrapping an Event value.",null,null],[3,"EventBuilderWithVersion","","Next step in creating a new [`PersistedEvent`] carrying an…",null,null],[3,"EventBuilderWithSequenceNumber","","Next step in creating a new [`PersistedEvent`] carrying an…",null,null],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",8,[[],["eventbuilderwithversion",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",8,[[],["eventbuilderwithsequencenumber",3]]],[11,"sequence_number","","Specifies the [`PersistentEvent`] sequence number and…",9,[[],["persistedevent",3]]],[11,"version","","Specifies the [`PersistentEvent`] version and moves to the…",10,[[],["persistedevent",3]]],[6,"EventStream","eventually_core::store","Stream type returned by the [`EventStore::stream`] method.",null,null],[8,"AppendError","","Error type returned by [`append`] in [`EventStore`]…",null,null],[10,"is_conflict_error","","Returns true if the error is due to a version conflict…",11,[[]]],[8,"EventStore","","An Event Store is an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, typically an [`AggregateId`].",12,null],[16,"Event","","Event to be stored in the `EventStore`, typically an…",12,null],[16,"Error","","Possible errors returned by the `EventStore` when…",12,null],[10,"append","","Appends a new list of [`Event`]s to the Event Store, for…",12,[[["vec",3],["expected",4]],[["boxfuture",6],["result",4]]]],[10,"stream","","Streams a list of [`Event`]s from the `EventStore` back to…",12,[[["select",4]],[["result",4],["boxfuture",6]]]],[10,"stream_all","","Streams a list of [`Event`]s from the `EventStore` back to…",12,[[["select",4]],[["result",4],["boxfuture",6]]]],[10,"remove","","Drops all the [`Event`]s related to one `Source`,…",12,[[],[["boxfuture",6],["result",4]]]],[11,"from","","Creates a new [`EventBuilder`] from the provided Event…",13,[[],["eventbuilder",3]]],[11,"sequence_number","","Returns the event sequence number.",13,[[]]],[11,"source_id","","Returns the [`SourceId`] of the persisted event.",13,[[]]],[11,"take","","Unwraps the inner [`Event`] from the `PersistedEvent`…",13,[[]]],[0,"versioning","eventually_core","Contains support for Optimistic Concurrency Control…",null,null],[8,"Versioned","eventually_core::versioning","Data type that carries a version for Optimistic…",null,null],[10,"version","","Current version of the data.",14,[[]]],[11,"from","eventually_core::aggregate","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","eventually_core::repository","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","eventually_core::store","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","eventually_core::store::persistent","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"version","eventually_core::aggregate","",3,[[]]],[11,"version","eventually_core::store","",13,[[]]],[11,"from","eventually_core::aggregate","",2,[[["arc",3]]]],[11,"from","eventually_core::store::persistent","",8,[[]]],[11,"clone","eventually_core::aggregate","",2,[[],["aggregaterootbuilder",3]]],[11,"clone","eventually_core::store","",13,[[],["persistedevent",3]]],[11,"clone","","",6,[[],["select",4]]],[11,"clone","","",7,[[],["expected",4]]],[11,"eq","eventually_core::aggregate","",3,[[]]],[11,"eq","eventually_core::store","",13,[[["persistedevent",3]]]],[11,"ne","","",13,[[["persistedevent",3]]]],[11,"eq","","",6,[[["select",4]]]],[11,"ne","","",6,[[["select",4]]]],[11,"eq","","",7,[[["expected",4]]]],[11,"ne","","",7,[[["expected",4]]]],[11,"deref","","",13,[[]]],[11,"fmt","eventually_core::aggregate","",3,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",4,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::store","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","eventually_core::repository","",4,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["error",8],["option",4]]]],[11,"serialize","eventually_core::aggregate","",3,[[],["result",4]]],[11,"serialize","eventually_core::store","",13,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[3,"AggregateRootBuilder"],[3,"AggregateRoot"],[4,"Error"],[3,"Repository"],[4,"Select"],[4,"Expected"],[3,"EventBuilder"],[3,"EventBuilderWithVersion"],[3,"EventBuilderWithSequenceNumber"],[8,"AppendError"],[8,"EventStore"],[3,"PersistedEvent"],[8,"Versioned"]]},\
"eventually_postgres":{"doc":"[`eventually`] type implementations for PostgreSQL.","i":[[3,"EventStoreBuilder","eventually_postgres","Builder type for [`EventStore`] instances.",null,null],[3,"EventStoreBuilderMigrated","","Builder step for [`EventStore`] instances, after the…",null,null],[3,"EventStore","","[`EventStore`] implementation using a PostgreSQL backend.",null,null],[4,"Error","","Error type returned by the [`EventStore`] implementation,…",null,null],[13,"EncodeEvents","","Error when encoding the events in [`append`] to JSON prior…",0,null],[13,"Postgres","","Error returned by Postgres when executing queries.",0,null],[6,"Result","","Result returning the crate [`Error`] type.",null,null],[11,"migrate_database","","Ensure the database is migrated to the latest version.",1,[[["client",3]]]],[11,"new","","Returns a new builder instance after migrations have been…",1,[[["arc",3],["client",3]],["eventstorebuildermigrated",3]]],[11,"build","","Creates a new [`EventStore`] instance using the specified…",2,[[]]],[11,"for_aggregate","","Creates a new [`EventStore`] for an [`Aggregate`] type.…",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"clone","","",3,[[],["eventstore",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"is_conflict_error","","",0,[[]]],[11,"append","","",3,[[["expected",4],["vec",3]],[["boxfuture",6],["result",6]]]],[11,"stream","","",3,[[["select",4]],[["result",6],["boxfuture",6]]]],[11,"stream_all","","",3,[[["select",4]],[["result",6],["boxfuture",6]]]],[11,"remove","","",3,[[],[["result",6],["boxfuture",6]]]]],"p":[[4,"Error"],[3,"EventStoreBuilder"],[3,"EventStoreBuilderMigrated"],[3,"EventStore"]]},\
"eventually_test":{"doc":"","i":[[5,"run","eventually_test","",null,[[["config",3]]]],[0,"config","","",null,null],[3,"Config","eventually_test::config","",null,null],[12,"db_host","","",0,null],[12,"db_port","","",0,null],[12,"db_username","","",0,null],[12,"db_password","","",0,null],[12,"db_database","","",0,null],[12,"http_port","","",0,null],[12,"log_level","","",0,null],[11,"postgres_dsn","","",0,[[],["string",3]]],[11,"http_addr","","",0,[[]]],[0,"order","eventually_test","",null,null],[3,"OrderItem","eventually_test::order","",null,null],[12,"item_sku","","",1,null],[12,"quantity","","",1,null],[12,"price","","",1,null],[3,"OrderItems","","",null,null],[3,"Order","","",null,null],[3,"OrderAggregate","","",null,null],[4,"OrderState","","",null,null],[13,"Editable","","",2,null],[12,"updated_at","eventually_test::order::OrderState","",3,null],[13,"Complete","eventually_test::order","",2,null],[12,"at","eventually_test::order::OrderState","",4,null],[13,"Cancelled","eventually_test::order","",2,null],[12,"at","eventually_test::order::OrderState","",5,null],[4,"OrderCommand","eventually_test::order","",null,null],[13,"Create","","",6,null],[13,"AddItem","","",6,null],[12,"item","eventually_test::order::OrderCommand","",7,null],[13,"Complete","eventually_test::order","",6,null],[13,"Cancel","","",6,null],[4,"OrderEvent","","",null,null],[13,"Created","","",8,null],[12,"id","eventually_test::order::OrderEvent","",9,null],[12,"at","","",9,null],[13,"ItemAdded","eventually_test::order","",8,null],[12,"item","eventually_test::order::OrderEvent","",10,null],[12,"at","","",10,null],[13,"Completed","eventually_test::order","",8,null],[12,"at","eventually_test::order::OrderEvent","",11,null],[13,"Cancelled","eventually_test::order","",8,null],[12,"at","eventually_test::order::OrderEvent","",12,null],[4,"OrderError","eventually_test::order","",null,null],[13,"AlreadyCreated","","",13,null],[13,"NotYetCreated","","",13,null],[13,"NotEditable","","",13,null],[13,"AlreadyCompleted","","",13,null],[13,"AlreadyCancelled","","",13,null],[11,"created_at","","",14,[[],[["utc",3],["datetime",3]]]],[11,"items","","",14,[[],["vec",3]]],[11,"state","","",14,[[],["orderstate",4]]],[11,"is_editable","","",14,[[]]],[11,"happened_at","","",8,[[],["datetime",3]]],[11,"from","eventually_test::config","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","eventually_test::order","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",15,[[["vec",3],["orderitem",3]]]],[11,"clone","","",1,[[],["orderitem",3]]],[11,"clone","","",2,[[],["orderstate",4]]],[11,"clone","","",14,[[],["order",3]]],[11,"clone","","",8,[[],["orderevent",4]]],[11,"clone","","",13,[[],["ordererror",4]]],[11,"clone","","",16,[[],["orderaggregate",3]]],[11,"eq","","",13,[[["ordererror",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["fmtresult",6]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"apply_first","","",16,[[],["result",4]]],[11,"apply_next","","",16,[[],["result",4]]],[11,"handle_first","","",16,[[],[["boxfuture",6],["result",4]]]],[11,"handle_next","","",16,[[],[["boxfuture",6],["result",4]]]],[11,"init","eventually_test::config","",0,[[],[["error",4],["result",4]]]]],"p":[[3,"Config"],[3,"OrderItem"],[4,"OrderState"],[13,"Editable"],[13,"Complete"],[13,"Cancelled"],[4,"OrderCommand"],[13,"AddItem"],[4,"OrderEvent"],[13,"Created"],[13,"ItemAdded"],[13,"Completed"],[13,"Cancelled"],[4,"OrderError"],[3,"Order"],[3,"OrderItems"],[3,"OrderAggregate"]]},\
"eventually_test_api":{"doc":"","i":[[5,"main","eventually_test_api","",null,[[],["result",6]]]],"p":[]},\
"eventually_util":{"doc":"","i":[[0,"inmemory","eventually_util","Contains supporting entities using an in-memory backend.",null,null],[3,"EventStoreBuilder","eventually_util::inmemory","Builder for [`EventStore`] instances.",null,null],[3,"EventStore","","An in-memory [`EventStore`] implementation, backed by an…",null,null],[4,"Error","","Error returned by the [`EventStore::append`] when a…",null,null],[13,"Conflict","","Version conflict registered.",0,null],[12,"expected","eventually_util::inmemory::Error","The last version value found the Store.",1,null],[12,"actual","","The actual version passed by the caller to the Store.",1,null],[11,"for_aggregate","eventually_util::inmemory","Builds a new [`EventStore`] instance compatible with the…",2,[[],["eventstore",3]]],[0,"optional","eventually_util","Contains a different flavour of the [`Aggregate`] trait,…",null,null],[3,"AsAggregate","eventually_util::optional","Newtype pattern to ensure compatibility between…",null,null],[8,"Aggregate","","An `Option`-flavoured, [`Aggregate`]-compatible trait to…",null,null],[16,"Id","","Identifier type of the Aggregate.",3,null],[16,"State","","State of the Aggregate.",3,null],[16,"Event","","Events produced and supported by the Aggregate.",3,null],[16,"Command","","Commands supported by the Aggregate.",3,null],[16,"Error","","Error produced by the the Aggregate while applying…",3,null],[10,"apply_first","","Applies the specified [`Event`] when the [`State`] is empty.",3,[[],["result",4]]],[10,"apply_next","","Applies the specified [`Event`] on a pre-existing…",3,[[],["result",4]]],[10,"handle_first","","Handles the specified [`Command`] when the [`State`] is…",3,[[],[["boxfuture",6],["result",4]]]],[10,"handle_next","","Handles the specified [`Command`] on a pre-existing…",3,[[],[["boxfuture",6],["result",4]]]],[11,"as_aggregate","","Translates the current [`optional::Aggregate`] instance…",3,[[],["asaggregate",3]]],[11,"from","eventually_util::inmemory","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","eventually_util::optional","",5,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"clone","eventually_util::inmemory","",4,[[],["eventstore",3]]],[11,"clone","eventually_util::optional","",5,[[],["asaggregate",3]]],[11,"default","eventually_util::inmemory","",4,[[]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"apply","eventually_util::optional","",5,[[],["result",4]]],[11,"handle","","",5,[[],[["result",4],["boxfuture",6]]]],[11,"append","eventually_util::inmemory","",4,[[["vec",3],["expected",4]],[["boxfuture",6],["result",4]]]],[11,"stream","","",4,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"stream_all","","",4,[[["select",4]],[["result",4],["boxfuture",6]]]],[11,"remove","","",4,[[],[["boxfuture",6],["result",4]]]],[11,"is_conflict_error","","",0,[[]]]],"p":[[4,"Error"],[13,"Conflict"],[3,"EventStoreBuilder"],[8,"Aggregate"],[3,"EventStore"],[3,"AsAggregate"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);