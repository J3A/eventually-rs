var searchIndex={};
searchIndex["eventually"] = {"doc":"","i":[[8,"Aggregate","eventually","An Aggregate is an entity which [`State`] is composed of…",null,null],[16,"State","","State of the Aggregate.",0,null],[16,"Event","","Domain events that express mutations of the Aggregate's…",0,null],[16,"Error","","Error type returned in [`apply`] when mutating the…",0,null],[10,"apply","","Applies the [`Event`] to the current [`State`], returning…",0,[[],["result"]]],[8,"AggregateExt","","Extension trait for [`Aggregate`] containing combinator…",null,null],[11,"fold","","Applies a synchronous stream of [`Event`]s to the current…",1,[[["i"]],["result"]]],[11,"async_fold","","Applies an asynchronous [`Stream`] of [`Event`]s to the…",1,[[["s"]],[["pin",["box"]],["box",["future"]]]]],[8,"Store","","Represents an Event Store, an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, usually an [`Aggregate`] id.",2,null],[16,"Offset","","Type of the memory offset supported by the `Store`.",2,null],[16,"Event","","Type of the events supported by the `Store`.",2,null],[16,"Error","","Possible errors returned by the `Store`.",2,null],[10,"stream","","Allows to stream many [`Events`] from the `Store` back to…",2,[[["self"]],[["pin",["box"]],["box",["stream"]]]]],[10,"append","","Appends a list of new events to the `Store`.",2,[[["vec"],["self"]],[["pin",["box"]],["box",["future"]]]]],[0,"aggregate","","",null,null],[6,"StateOf","eventually::aggregate","Alias for the [`State`] type of an [`Aggregate`].",null,null],[6,"EventOf","","Alias for the [`Event`] type of an [`Aggregate`].",null,null],[6,"ErrorOf","","Alias for the [`Error`] type of an [`Aggregate`].",null,null],[8,"Identifiable","","",null,null],[16,"Id","","",3,null],[10,"aggregate_id","","",3,[[["self"]]]],[8,"Aggregate","","An Aggregate is an entity which [`State`] is composed of…",null,null],[16,"State","","State of the Aggregate.",0,null],[16,"Event","","Domain events that express mutations of the Aggregate's…",0,null],[16,"Error","","Error type returned in [`apply`] when mutating the…",0,null],[10,"apply","","Applies the [`Event`] to the current [`State`], returning…",0,[[],["result"]]],[8,"AggregateExt","","Extension trait for [`Aggregate`] containing combinator…",null,null],[11,"fold","","Applies a synchronous stream of [`Event`]s to the current…",1,[[["i"]],["result"]]],[11,"async_fold","","Applies an asynchronous [`Stream`] of [`Event`]s to the…",1,[[["s"]],[["pin",["box"]],["box",["future"]]]]],[0,"referential","","Contains [`Aggregate`] variant where aggregate root and…",null,null],[8,"Aggregate","eventually::aggregate::referential","An [`Aggregate`] representation where the [`State`] is the…",null,null],[16,"Event","","Domain events that express Aggregate's mutations.",4,null],[16,"Error","","Error returned by [`apply`] when handling an incorrect…",4,null],[10,"apply","","Applies an [`Event`] to the current state of the Aggregate…",4,[[],["result"]]],[3,"AsAggregate","","Adapter for [`Aggregate`] types to the foundational…",null,null],[8,"ReferentialAggregate","eventually::aggregate","An [`Aggregate`] representation where the [`State`] is the…",null,null],[16,"Event","","Domain events that express Aggregate's mutations.",4,null],[16,"Error","","Error returned by [`apply`] when handling an incorrect…",4,null],[10,"apply","","Applies an [`Event`] to the current state of the Aggregate…",4,[[],["result"]]],[0,"command","eventually","",null,null],[6,"CommandOf","eventually::command","",null,null],[6,"AggregateOf","","",null,null],[6,"ErrorOf","","",null,null],[6,"Result","","",null,null],[8,"Handler","","",null,null],[16,"Command","","",5,null],[16,"Aggregate","","",5,null],[16,"Error","","",5,null],[10,"handle","","",5,[[["self"]],[["box",["future"]],["pin",["box"]]]]],[3,"DirectDispatcher","","",null,null],[8,"Dispatcher","","",null,null],[16,"CommandHandler","","",6,null],[16,"Error","","",6,null],[10,"dispatch","","",6,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[0,"dispatcher","","",null,null],[6,"SourceIdOf","eventually::command::dispatcher","",null,null],[8,"Identifiable","","",null,null],[16,"SourceId","","",7,null],[10,"source_id","","",7,[[["self"]]]],[4,"Error","","",null,null],[13,"RecreateStateFailed","","",8,null],[13,"CommandFailed","","",8,null],[13,"ApplyStateFailed","","",8,null],[13,"AppendEventsFailed","","",8,null],[3,"DirectDispatcher","","",null,null],[0,"static","eventually::command","",null,null],[8,"Handler","eventually::command::static","",null,null],[16,"Command","","",9,null],[16,"Aggregate","","",9,null],[16,"Error","","",9,null],[11,"as_handler","","",9,[[],["ashandler"]]],[10,"handle","","",9,[[],[["pin",["box"]],["box",["future"]]]]],[3,"AsHandler","","",null,null],[0,"optional","eventually","",null,null],[8,"CommandHandler","eventually::optional","Command Handler trait referring to [`Aggregate`] with…",null,null],[16,"Command","","Commands to trigger a specific use-case on the context of…",10,null],[16,"Aggregate","","Domain entity produced, updated or, in some way, affected…",10,null],[16,"Error","","Possible expected errors to be returned when handling a…",10,null],[10,"handle_first","","Handles a [`Command`] when the [`Aggregate`] state is not…",10,[[["self"]],[["box",["future"]],["pin",["box"]]]]],[10,"handle_next","","Handles a [`Command`] when the previous [`Aggregate`]…",10,[[["self"]],[["box",["future"]],["pin",["box"]]]]],[11,"as_handler","","Adapts the [`CommandHandler`] implementation to the…",10,[[],["ashandler"]]],[3,"AsHandler","","Adapter for [`CommandHandler`] implementators to…",null,null],[6,"StateOf","","Extract the [`State`] from an [`Aggregate`].",null,null],[6,"EventOf","","Extract the [`Event`] from an [`Aggregate`].",null,null],[8,"Aggregate","","Variation of [`aggregate::Aggregate`] trait, useful when…",null,null],[16,"State","","State of the Aggregate.",11,null],[16,"Event","","Event of the Aggregate.",11,null],[16,"Error","","Error occurring when appling an [`Event`] to an Aggregate.",11,null],[10,"apply_first","","Handles events when the [`State`] has not been found.",11,[[],["result"]]],[10,"apply_next","","Handles events when the [`State`] has been found, and…",11,[[],["result"]]],[3,"AsAggregate","","Adapter for [`Aggregate`] types to the foundational…",null,null],[0,"versioned","eventually","",null,null],[8,"CommandHandlerExt","eventually::versioned","Extension trait for [`CommandHandler`] to support a…",null,null],[11,"versioned","","Returns a decorated version of the [`CommandHandler`], in…",12,[[],["ashandler"]]],[3,"AsHandler","","A [`CommandHandler`] decorator to support versioned…",null,null],[3,"AsAggregate","","An [`Aggregate`] decorator that supports versioning.",null,null],[3,"Versioned","","Wrapper to embed version information for un-versioned data…",null,null],[11,"from","eventually::aggregate::referential","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","eventually::command::dispatcher","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","eventually::command::static","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","eventually::optional","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","eventually::versioned","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"handle","eventually::command::static","",15,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"handle","eventually::optional","",16,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"handle","eventually::versioned","",18,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"clone","","",20,[[["self"]],["versioned"]]],[11,"clone","eventually::optional","",16,[[["self"]],["ashandler"]]],[11,"clone","eventually::versioned","",18,[[["self"]],["ashandler"]]],[11,"clone","eventually::command::static","",15,[[["self"]],["ashandler"]]],[11,"clone","eventually::aggregate::referential","",13,[[["self"]],["asaggregate"]]],[11,"clone","eventually::optional","",17,[[["self"]],["asaggregate"]]],[11,"clone","eventually::versioned","",19,[[["self"]],["asaggregate"]]],[11,"clone","eventually::command::dispatcher","",14,[[["self"]],["directdispatcher"]]],[11,"eq","eventually::versioned","",20,[[["self"],["versioned"]],["bool"]]],[11,"ne","","",20,[[["self"],["versioned"]],["bool"]]],[11,"eq","eventually::command::dispatcher","",8,[[["error"],["self"]],["bool"]]],[11,"ne","","",8,[[["error"],["self"]],["bool"]]],[11,"fmt","eventually::command::static","",15,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::optional","",16,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::command::dispatcher","",14,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::versioned","",18,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::aggregate::referential","",13,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::command::dispatcher","",8,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::versioned","",20,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::optional","",17,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","eventually::versioned","",19,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"apply","","",19,[[],["result"]]],[11,"apply","eventually::aggregate::referential","",13,[[],["result"]]],[11,"apply","eventually::optional","",17,[[],["result"]]],[11,"from","eventually::versioned","",20,[[["t"]],["versioned"]]],[11,"deref_mut","","",20,[[["self"]]]],[11,"deref","","",20,[[["self"]]]],[11,"source","eventually::command::dispatcher","",8,[[["self"]],[["error"],["option",["error"]]]]],[11,"dispatch","","",14,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"default","eventually::versioned","",20,[[],["versioned"]]],[11,"default","eventually::command::dispatcher","",14,[[],["directdispatcher"]]],[11,"new","","",14,[[["handler"],["store"]],["directdispatcher"]]],[11,"with_version","eventually::versioned","Wraps data with the specified version information.",20,[[["t"],["u64"]],["versioned"]]],[11,"version","","Returns version information.",20,[[["self"]],["u64"]]],[11,"take","","Extracts the wrapped data from the instance.",20,[[],["t"]]]],"p":[[8,"Aggregate"],[8,"AggregateExt"],[8,"Store"],[8,"Identifiable"],[8,"ReferentialAggregate"],[8,"Handler"],[8,"Dispatcher"],[8,"Identifiable"],[4,"Error"],[8,"Handler"],[8,"CommandHandler"],[8,"Aggregate"],[8,"CommandHandlerExt"],[3,"AsAggregate"],[3,"DirectDispatcher"],[3,"AsHandler"],[3,"AsHandler"],[3,"AsAggregate"],[3,"AsHandler"],[3,"AsAggregate"],[3,"Versioned"]]};
searchIndex["eventually_core"] = {"doc":"","i":[[0,"aggregate","eventually_core","Foundation traits for creating Domain abstractions using…",null,null],[6,"StateOf","eventually_core::aggregate","Alias for the [`State`] type of an [`Aggregate`].",null,null],[6,"EventOf","","Alias for the [`Event`] type of an [`Aggregate`].",null,null],[6,"ErrorOf","","Alias for the [`Error`] type of an [`Aggregate`].",null,null],[8,"Identifiable","","",null,null],[16,"Id","","",0,null],[10,"aggregate_id","","",0,[[["self"]]]],[8,"Aggregate","","An Aggregate is an entity which [`State`] is composed of…",null,null],[16,"State","","State of the Aggregate.",1,null],[16,"Event","","Domain events that express mutations of the Aggregate's…",1,null],[16,"Error","","Error type returned in [`apply`] when mutating the…",1,null],[10,"apply","","Applies the [`Event`] to the current [`State`], returning…",1,[[],["result"]]],[8,"AggregateExt","","Extension trait for [`Aggregate`] containing combinator…",null,null],[11,"fold","","Applies a synchronous stream of [`Event`]s to the current…",2,[[["i"]],["result"]]],[11,"async_fold","","Applies an asynchronous [`Stream`] of [`Event`]s to the…",2,[[["s"]],[["result"],["boxfuture",["result"]]]]],[0,"command","eventually_core","",null,null],[6,"CommandOf","eventually_core::command","",null,null],[6,"AggregateOf","","",null,null],[6,"ErrorOf","","",null,null],[6,"Result","","",null,null],[8,"Handler","","",null,null],[16,"Command","","",3,null],[16,"Aggregate","","",3,null],[16,"Error","","",3,null],[10,"handle","","",3,[[["stateof"],["self"]],[["result",["eventof"]],["boxfuture",["result"]]]]],[0,"store","eventually_core","Contains abstractions for the Event Store feature.",null,null],[8,"Store","eventually_core::store","Represents an Event Store, an append-only, ordered list of…",null,null],[16,"SourceId","","Type of the Source id, usually an [`Aggregate`] id.",4,null],[16,"Offset","","Type of the memory offset supported by the `Store`.",4,null],[16,"Event","","Type of the events supported by the `Store`.",4,null],[16,"Error","","Possible errors returned by the `Store`.",4,null],[10,"stream","","Allows to stream many [`Events`] from the `Store` back to…",4,[[["self"]],[["boxstream",["result"]],["result"]]]],[10,"append","","Appends a list of new events to the `Store`.",4,[[["vec"],["self"]],[["boxfuture",["result"]],["result"]]]]],"p":[[8,"Identifiable"],[8,"Aggregate"],[8,"AggregateExt"],[8,"Handler"],[8,"Store"]]};
searchIndex["eventually_memory"] = {"doc":"Utility crate for [`eventually`] persistance using…","i":[[3,"Store","eventually_memory","A general in-memory, event store implementation compatible…",null,null],[11,"new","","Creates a new, empty instance of a Store.",0,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["store"]]],[11,"default","","",0,[[],["self"]]],[11,"stream","","",0,[[["self"]],[["boxstream",["result"]],["result",["infallible"]]]]],[11,"append","","",0,[[["self"],["vec"]],[["result"],["boxfuture",["result"]]]]]],"p":[[3,"Store"]]};
searchIndex["eventually_util"] = {"doc":"","i":[[0,"aggregate","eventually_util","",null,null],[0,"referential","eventually_util::aggregate","Contains [`Aggregate`] variant where aggregate root and…",null,null],[3,"AsAggregate","eventually_util::aggregate::referential","Adapter for [`Aggregate`] types to the foundational…",null,null],[8,"Aggregate","","An [`Aggregate`] representation where the [`State`] is the…",null,null],[16,"Event","","Domain events that express Aggregate's mutations.",0,null],[16,"Error","","Error returned by [`apply`] when handling an incorrect…",0,null],[10,"apply","","Applies an [`Event`] to the current state of the Aggregate…",0,[[],["result"]]],[0,"command","eventually_util","",null,null],[0,"dispatcher","eventually_util::command","",null,null],[3,"DirectDispatcher","eventually_util::command::dispatcher","",null,null],[4,"Error","","",null,null],[13,"RecreateStateFailed","","",1,null],[13,"CommandFailed","","",1,null],[13,"ApplyStateFailed","","",1,null],[13,"AppendEventsFailed","","",1,null],[6,"SourceIdOf","","",null,null],[8,"Identifiable","","",null,null],[16,"SourceId","","",2,null],[10,"source_id","","",2,[[["self"]]]],[11,"new","","",3,[[["handler"],["store"]],["self"]]],[0,"static","eventually_util::command","",null,null],[3,"AsHandler","eventually_util::command::static","",null,null],[8,"Handler","","",null,null],[16,"Command","","",4,null],[16,"Aggregate","","",4,null],[16,"Error","","",4,null],[11,"as_handler","","",4,[[],["ashandler"]]],[10,"handle","","",4,[[["stateof"]],[["boxfuture",["result"]],["result",["eventof"]]]]],[8,"Dispatcher","eventually_util::command","",null,null],[16,"CommandHandler","","",5,null],[16,"Error","","",5,null],[10,"dispatch","","",5,[[["self"],["commandof"]],[["boxfuture",["result"]],["result",["stateof"]]]]],[0,"optional","eventually_util","Support for [`Aggregate`] with [`Option`] state.",null,null],[3,"AsHandler","eventually_util::optional","Adapter for [`CommandHandler`] implementators to…",null,null],[3,"AsAggregate","","Adapter for [`Aggregate`] types to the foundational…",null,null],[6,"StateOf","","Extract the [`State`] from an [`Aggregate`].",null,null],[6,"EventOf","","Extract the [`Event`] from an [`Aggregate`].",null,null],[8,"CommandHandler","","Command Handler trait referring to [`Aggregate`] with…",null,null],[16,"Command","","Commands to trigger a specific use-case on the context of…",6,null],[16,"Aggregate","","Domain entity produced, updated or, in some way, affected…",6,null],[16,"Error","","Possible expected errors to be returned when handling a…",6,null],[10,"handle_first","","Handles a [`Command`] when the [`Aggregate`] state is not…",6,[[["self"]],[["result",["eventof"]],["boxfuture",["result"]]]]],[10,"handle_next","","Handles a [`Command`] when the previous [`Aggregate`]…",6,[[["self"],["stateof"]],[["result",["eventof"]],["boxfuture",["result"]]]]],[11,"as_handler","","Adapts the [`CommandHandler`] implementation to the…",6,[[],["ashandler"]]],[8,"Aggregate","","Variation of [`aggregate::Aggregate`] trait, useful when…",null,null],[16,"State","","State of the Aggregate.",7,null],[16,"Event","","Event of the Aggregate.",7,null],[16,"Error","","Error occurring when appling an [`Event`] to an Aggregate.",7,null],[10,"apply_first","","Handles events when the [`State`] has not been found.",7,[[],["result"]]],[10,"apply_next","","Handles events when the [`State`] has been found, and…",7,[[],["result"]]],[0,"versioned","eventually_util","Versioning for [Optimistic Concurrency Control] support.",null,null],[3,"AsHandler","eventually_util::versioned","A [`CommandHandler`] decorator to support versioned…",null,null],[3,"AsAggregate","","An [`Aggregate`] decorator that supports versioning.",null,null],[3,"Versioned","","Wrapper to embed version information for un-versioned data…",null,null],[8,"CommandHandlerExt","","Extension trait for [`CommandHandler`] to support a…",null,null],[11,"versioned","","Returns a decorated version of the [`CommandHandler`], in…",8,[[],["ashandler"]]],[11,"with_version","","Wraps data with the specified version information.",9,[[["t"],["u64"]],["self"]]],[11,"version","","Returns version information.",9,[[["self"]],["u64"]]],[11,"take","","Extracts the wrapped data from the instance.",9,[[],["t"]]],[11,"from","eventually_util::aggregate::referential","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","eventually_util::command::dispatcher","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","eventually_util::command::static","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","eventually_util::optional","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","eventually_util::versioned","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",9,[[],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"dispatch","eventually_util::command::dispatcher","",3,[[["commandof"],["self"]],[["result",["stateof"]],["boxfuture",["result"]]]]],[11,"from","eventually_util::versioned","",9,[[["t"]],["self"]]],[11,"clone","eventually_util::aggregate::referential","",10,[[["self"]],["asaggregate"]]],[11,"clone","eventually_util::command::dispatcher","",3,[[["self"]],["directdispatcher"]]],[11,"clone","eventually_util::command::static","",11,[[["self"]],["ashandler"]]],[11,"clone","eventually_util::optional","",12,[[["self"]],["ashandler"]]],[11,"clone","","",13,[[["self"]],["asaggregate"]]],[11,"clone","eventually_util::versioned","",14,[[["self"]],["ashandler"]]],[11,"clone","","",15,[[["self"]],["asaggregate"]]],[11,"clone","","",9,[[["self"]],["versioned"]]],[11,"default","eventually_util::command::dispatcher","",3,[[],["self"]]],[11,"default","eventually_util::versioned","",9,[[],["self"]]],[11,"eq","eventually_util::command::dispatcher","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"eq","eventually_util::versioned","",9,[[["self"],["versioned"]],["bool"]]],[11,"ne","","",9,[[["self"],["versioned"]],["bool"]]],[11,"deref","","",9,[[["self"]]]],[11,"deref_mut","","",9,[[["self"]]]],[11,"fmt","eventually_util::aggregate::referential","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","eventually_util::command::dispatcher","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","eventually_util::command::static","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","eventually_util::optional","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","eventually_util::versioned","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","eventually_util::command::dispatcher","",1,[[["formatter"],["self"]],["result"]]],[11,"source","","",1,[[["self"]],[["option",["stderror"]],["stderror"]]]],[11,"apply","eventually_util::aggregate::referential","",10,[[],["result"]]],[11,"apply","eventually_util::optional","",13,[[],["result"]]],[11,"apply","eventually_util::versioned","",15,[[],["result"]]],[11,"handle","eventually_util::command::static","",11,[[["stateof"],["self"]],[["result",["eventof"]],["boxfuture",["result"]]]]],[11,"handle","eventually_util::optional","",12,[[["self"],["stateof"]],[["result",["eventof"]],["boxfuture",["result"]]]]],[11,"handle","eventually_util::versioned","",14,[[["stateof"],["self"]],[["boxfuture",["commandresult"]],["commandresult",["eventof"]]]]]],"p":[[8,"Aggregate"],[4,"Error"],[8,"Identifiable"],[3,"DirectDispatcher"],[8,"Handler"],[8,"Dispatcher"],[8,"CommandHandler"],[8,"Aggregate"],[8,"CommandHandlerExt"],[3,"Versioned"],[3,"AsAggregate"],[3,"AsHandler"],[3,"AsHandler"],[3,"AsAggregate"],[3,"AsHandler"],[3,"AsAggregate"]]};
searchIndex["main"] = {"doc":"","i":[[5,"main","main","",null,[[]]],[6,"DispatchError","","",null,null]],"p":[]};
searchIndex["point"] = {"doc":"","i":[[3,"State","point","",null,null],[3,"Root","","",null,null],[3,"Handler","","",null,null],[4,"Command","","",null,null],[13,"Register","","",0,null],[12,"id","point::Command","",1,null],[13,"GoUp","point","",0,null],[12,"id","point::Command","",2,null],[12,"v","","",2,null],[13,"GoDown","point","",0,null],[12,"id","point::Command","",3,null],[12,"v","","",3,null],[13,"GoLeft","point","",0,null],[12,"id","point::Command","",4,null],[12,"v","","",4,null],[13,"GoRight","point","",0,null],[12,"id","point::Command","",5,null],[12,"v","","",5,null],[4,"Event","point","",null,null],[13,"Registered","","",6,null],[12,"id","point::Event","",7,null],[13,"WentUp","point","",6,null],[12,"v","point::Event","",8,null],[13,"WentDown","point","",6,null],[12,"v","point::Event","",9,null],[13,"WentLeft","point","",6,null],[12,"v","point::Event","",10,null],[13,"WentRight","point","",6,null],[12,"v","point::Event","",11,null],[4,"CommandError","point","",null,null],[13,"Unregistered","","",12,null],[13,"AlreadyRegistered","","",12,null],[4,"EventError","","",null,null],[13,"Unregistered","","",13,null],[13,"AlreadyRegistered","","",13,null],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"clone","","",0,[[["self"]],["command"]]],[11,"clone","","",6,[[["self"]],["event"]]],[11,"eq","","",0,[[["command"],["self"]],["bool"]]],[11,"ne","","",0,[[["command"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["event"]],["bool"]]],[11,"ne","","",6,[[["self"],["event"]],["bool"]]],[11,"eq","","",12,[[["self"],["commanderror"]],["bool"]]],[11,"ne","","",12,[[["self"],["commanderror"]],["bool"]]],[11,"eq","","",13,[[["eventerror"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["state"]],["bool"]]],[11,"ne","","",14,[[["self"],["state"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"apply","","",14,[[],["result"]]],[11,"source_id","","",0,[[["self"]]]],[11,"handle_first","","",16,[[["self"]],[["boxfuture",["result"]],["result",["eventof"]]]]],[11,"handle_next","","",16,[[["self"],["stateof"]],[["boxfuture",["result"]],["result",["eventof"]]]]],[11,"apply_first","","",15,[[],["result"]]],[11,"apply_next","","",15,[[],["result"]]]],"p":[[4,"Command"],[13,"Register"],[13,"GoUp"],[13,"GoDown"],[13,"GoLeft"],[13,"GoRight"],[4,"Event"],[13,"Registered"],[13,"WentUp"],[13,"WentDown"],[13,"WentLeft"],[13,"WentRight"],[4,"CommandError"],[4,"EventError"],[3,"State"],[3,"Root"],[3,"Handler"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);